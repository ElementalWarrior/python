{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocstrings-python A Python handler for mkdocstrings . Installation \u00a4 You can install this handler as a mkdocstrings extra: pyproject.toml # PEP 621 dependencies declaration # adapt to your dependencies manager [project] dependencies = [ \"mkdocstrings[python]>=0.18\" , ] You can also explicitely depend on the handler: pyproject.toml # PEP 621 dependencies declaration # adapt to your dependencies manager [project] dependencies = [ \"mkdocstrings-python\" , ] Preview \u00a4 Features \u00a4 Data collection from source code : collection of the object-tree and the docstrings is done thanks to Griffe . Support for type annotations: Griffe collects your type annotations and mkdocstrings uses them to display parameters types or return types. It is even able to automatically add cross-references to other objects from your API, from the standard library or from third-party libraries! See how to load inventories to enable it. Recursive documentation of Python objects: just use the module dotted-path as identifier, and you get the full module docs. You don't need to inject documentation for each class, function, etc. Support for documented attributes: attributes (variables) followed by a docstring (triple-quoted string) will be recognized by Griffe in modules, classes and even in __init__ methods. Multiple docstring-styles support: common support for Google-style, Numpydoc-style, and Sphinx-style docstrings. See Griffe's documentation on docstrings support. Admonition support in Google docstrings: blocks like Note: or Warning: will be transformed to their admonition equivalent. We do not support nested admonitions in docstrings! Every object has a TOC entry: we render a heading for each object, meaning MkDocs picks them into the Table of Contents, which is nicely display by the Material theme. Thanks to mkdocstrings cross-reference ability, you can reference other objects within your docstrings, with the classic Markdown syntax: [this object][package.module.object] or directly with [package.module.object][] Source code display: mkdocstrings can add a collapsible div containing the highlighted source code of the Python object.","title":"Overview"},{"location":"#installation","text":"You can install this handler as a mkdocstrings extra: pyproject.toml # PEP 621 dependencies declaration # adapt to your dependencies manager [project] dependencies = [ \"mkdocstrings[python]>=0.18\" , ] You can also explicitely depend on the handler: pyproject.toml # PEP 621 dependencies declaration # adapt to your dependencies manager [project] dependencies = [ \"mkdocstrings-python\" , ]","title":"Installation"},{"location":"#preview","text":"","title":"Preview"},{"location":"#features","text":"Data collection from source code : collection of the object-tree and the docstrings is done thanks to Griffe . Support for type annotations: Griffe collects your type annotations and mkdocstrings uses them to display parameters types or return types. It is even able to automatically add cross-references to other objects from your API, from the standard library or from third-party libraries! See how to load inventories to enable it. Recursive documentation of Python objects: just use the module dotted-path as identifier, and you get the full module docs. You don't need to inject documentation for each class, function, etc. Support for documented attributes: attributes (variables) followed by a docstring (triple-quoted string) will be recognized by Griffe in modules, classes and even in __init__ methods. Multiple docstring-styles support: common support for Google-style, Numpydoc-style, and Sphinx-style docstrings. See Griffe's documentation on docstrings support. Admonition support in Google docstrings: blocks like Note: or Warning: will be transformed to their admonition equivalent. We do not support nested admonitions in docstrings! Every object has a TOC entry: we render a heading for each object, meaning MkDocs picks them into the Table of Contents, which is nicely display by the Material theme. Thanks to mkdocstrings cross-reference ability, you can reference other objects within your docstrings, with the classic Markdown syntax: [this object][package.module.object] or directly with [package.module.object][] Source code display: mkdocstrings can add a collapsible div containing the highlighted source code of the Python object.","title":"Features"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.7.0 - 2022-05-28 \u00a4 Compare with 0.6.6 Packaging / Dependencies \u00a4 Depend on mkdocstrings 0.19 ( b6a9a47 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Add config option for annotations paths verbosity ( b6c9893 by Timoth\u00e9e Mazzucotelli). Use sections titles in SpaCy-styled docstrings ( fe16b54 by Timoth\u00e9e Mazzucotelli). Wrap objects names in spans to allow custom styling ( 0822ff9 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#240 Add Jinja blocks around docstring section styles ( aaa79ee by Timoth\u00e9e Mazzucotelli). Add members and filters options ( 24a6136 by Timoth\u00e9e Mazzucotelli). Add paths option ( dd41182 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#311 , PR #20 Bug Fixes \u00a4 Fix CSS class on labels ( 312a709 by Timoth\u00e9e Mazzucotelli). Fix categories rendering ( 6407cf4 by Timoth\u00e9e Mazzucotelli). Issue #14 Code Refactoring \u00a4 Disable show_submodules by default ( 480d0c3 by Timoth\u00e9e Mazzucotelli). Merge default configuration options in handler ( 347ce76 by Timoth\u00e9e Mazzucotelli). Reduce number of template debug logs ( 8fed314 by Timoth\u00e9e Mazzucotelli). Respect show_root_full_path for ToC entries (hidden headings) ( 8f4c853 by Timoth\u00e9e Mazzucotelli). Bring consistency on headings style ( 59104c4 by Timoth\u00e9e Mazzucotelli). Stop using deprecated base classes ( d5ea1c5 by Timoth\u00e9e Mazzucotelli). 0.6.6 - 2022-03-06 \u00a4 Compare with 0.6.5 Code Refactoring \u00a4 Always hide self and cls parameters ( 7f579d1 by Timoth\u00e9e Mazzucotelli). Issue #7 Use pycon for examples code blocks ( 6545900 by Timoth\u00e9e Mazzucotelli). 0.6.5 - 2022-02-24 \u00a4 Compare with 0.6.4 Bug Fixes \u00a4 Don't escape signatures return annotations ( ac54bfc by Timoth\u00e9e Mazzucotelli). Issue #6 0.6.4 - 2022-02-22 \u00a4 Compare with 0.6.3 Bug Fixes \u00a4 Fix rendering of signature return annotation ( b92ba3b by Timoth\u00e9e Mazzucotelli). Issue #4 0.6.3 - 2022-02-20 \u00a4 Compare with 0.6.2 Bug Fixes \u00a4 Fix examples rendering ( a06a7e3 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/griffe#46 0.6.2 - 2022-02-17 \u00a4 Compare with 0.6.1 Bug Fixes \u00a4 Catch alias resolution errors ( b734dd0 by Timoth\u00e9e Mazzucotelli). 0.6.1 - 2022-02-17 \u00a4 Compare with 0.6.0 Bug Fixes \u00a4 Don't pop from fallback config ( bde32af by Timoth\u00e9e Mazzucotelli). Fix rendering init method source when merged into class ( 4a20aea by Timoth\u00e9e Mazzucotelli). 0.6.0 - 2022-02-13 \u00a4 Compare with 0.5.4 Features \u00a4 Add option to merge __init__ methods' docstrings into their classes' docstrings ( 1b4d1c0 by Timoth\u00e9e Mazzucotelli). Support separate attribute signature ( e962b88 by Timoth\u00e9e Mazzucotelli). Bug Fixes \u00a4 Restore full cross-refs paths on hover ( ac11970 by Timoth\u00e9e Mazzucotelli). Fix rendering of labels ( 52919c5 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Don't add trailing parentheses in functions heading when separate signature ( 885696e by Timoth\u00e9e Mazzucotelli). Use more explicit template debug messages ( f2122d7 by Timoth\u00e9e Mazzucotelli). 0.5.4 - 2022-02-13 \u00a4 Compare with 0.5.3 Bug Fixes \u00a4 Don't load additional modules during fallback ( 69b8e25 by Timoth\u00e9e Mazzucotelli). 0.5.3 - 2022-02-08 \u00a4 Compare with 0.5.2 Bug Fixes \u00a4 Allow passing null as docstring style ( f526816 by Timoth\u00e9e Mazzucotelli). Issue #2 0.5.2 - 2022-02-05 \u00a4 Compare with 0.5.1 Dependencies \u00a4 Require at least mkdocstrings 0.18 ( 7abdda4 by Timoth\u00e9e Mazzucotelli). 0.5.1 - 2022-02-03 \u00a4 Compare with 0.5.0 Dependencies \u00a4 Depend on Griffe >= 0.11.1 ( 1303557 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Move handler into its own module ( b787e78 by Timoth\u00e9e Mazzucotelli). 0.5.0 - 2022-02-03 \u00a4 Compare with 0.4.1 Features \u00a4 Allow changing docstring style of an object ( 39240c1 by Timoth\u00e9e Mazzucotelli). Bug Fixes \u00a4 Warn if Black is not installed when formatting signature ( b848277 by Timoth\u00e9e Mazzucotelli). Fix missing default for docstring_section_style option ( 774988e by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Change to new way of stripping paragraphs ( 33d4594 by Timoth\u00e9e Mazzucotelli). 0.4.1 - 2022-02-01 \u00a4 Compare with 0.4.0 Bug Fixes \u00a4 Fix docstring admonitions rendering ( a24ae2e by Timoth\u00e9e Mazzucotelli). 0.4.0 - 2022-02-01 \u00a4 Compare with 0.3.0 Code Refactoring \u00a4 Use the new mkdocstrings_handlers namespace ( 23c9023 by Timoth\u00e9e Mazzucotelli). 0.3.0 - 2022-01-14 \u00a4 Compare with 0.2.0 Features \u00a4 Support griffe 0.10 ( 28061de by Timoth\u00e9e Mazzucotelli). Dependencies \u00a4 Require griffe 0.10 ( cfbd7bb by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Use new logger patching utility ( 4cdb292 by Timoth\u00e9e Mazzucotelli). 0.2.0 - 2021-12-28 \u00a4 Compare with 0.1.0 Dependencies \u00a4 Depend on griffe >= 0.7.1 ( 34f7ebd by Timoth\u00e9e Mazzucotelli). Upgrade griffe, no upper bound ( 8f0aa42 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Add show_signature rendering option ( 0f07c2e by Will Da Silva). Bug Fixes \u00a4 Fix templates for named docstring elements ( 47868a1 by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2021-12-19 \u00a4 Compare with first commit Features \u00a4 Implement handler and add templates ( dbb580a by Timoth\u00e9e Mazzucotelli). Bug Fixes \u00a4 Fix separate signature feature ( da6e81c by Timoth\u00e9e Mazzucotelli). Fix signature template (parameters annotations) ( b34ead0 by Timoth\u00e9e Mazzucotelli). Only show source when present ( c270d68 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Return all known anchors ( 9bbfe14 by Timoth\u00e9e Mazzucotelli). Update for griffe 0.4.0 ( 831aabb by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#070-2022-05-28","text":"Compare with 0.6.6","title":"0.7.0 - 2022-05-28"},{"location":"changelog/#packaging-dependencies","text":"Depend on mkdocstrings 0.19 ( b6a9a47 by Timoth\u00e9e Mazzucotelli).","title":"Packaging / Dependencies"},{"location":"changelog/#features","text":"Add config option for annotations paths verbosity ( b6c9893 by Timoth\u00e9e Mazzucotelli). Use sections titles in SpaCy-styled docstrings ( fe16b54 by Timoth\u00e9e Mazzucotelli). Wrap objects names in spans to allow custom styling ( 0822ff9 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#240 Add Jinja blocks around docstring section styles ( aaa79ee by Timoth\u00e9e Mazzucotelli). Add members and filters options ( 24a6136 by Timoth\u00e9e Mazzucotelli). Add paths option ( dd41182 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#311 , PR #20","title":"Features"},{"location":"changelog/#bug-fixes","text":"Fix CSS class on labels ( 312a709 by Timoth\u00e9e Mazzucotelli). Fix categories rendering ( 6407cf4 by Timoth\u00e9e Mazzucotelli). Issue #14","title":"Bug Fixes"},{"location":"changelog/#code-refactoring","text":"Disable show_submodules by default ( 480d0c3 by Timoth\u00e9e Mazzucotelli). Merge default configuration options in handler ( 347ce76 by Timoth\u00e9e Mazzucotelli). Reduce number of template debug logs ( 8fed314 by Timoth\u00e9e Mazzucotelli). Respect show_root_full_path for ToC entries (hidden headings) ( 8f4c853 by Timoth\u00e9e Mazzucotelli). Bring consistency on headings style ( 59104c4 by Timoth\u00e9e Mazzucotelli). Stop using deprecated base classes ( d5ea1c5 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#066-2022-03-06","text":"Compare with 0.6.5","title":"0.6.6 - 2022-03-06"},{"location":"changelog/#code-refactoring_1","text":"Always hide self and cls parameters ( 7f579d1 by Timoth\u00e9e Mazzucotelli). Issue #7 Use pycon for examples code blocks ( 6545900 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#065-2022-02-24","text":"Compare with 0.6.4","title":"0.6.5 - 2022-02-24"},{"location":"changelog/#bug-fixes_1","text":"Don't escape signatures return annotations ( ac54bfc by Timoth\u00e9e Mazzucotelli). Issue #6","title":"Bug Fixes"},{"location":"changelog/#064-2022-02-22","text":"Compare with 0.6.3","title":"0.6.4 - 2022-02-22"},{"location":"changelog/#bug-fixes_2","text":"Fix rendering of signature return annotation ( b92ba3b by Timoth\u00e9e Mazzucotelli). Issue #4","title":"Bug Fixes"},{"location":"changelog/#063-2022-02-20","text":"Compare with 0.6.2","title":"0.6.3 - 2022-02-20"},{"location":"changelog/#bug-fixes_3","text":"Fix examples rendering ( a06a7e3 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/griffe#46","title":"Bug Fixes"},{"location":"changelog/#062-2022-02-17","text":"Compare with 0.6.1","title":"0.6.2 - 2022-02-17"},{"location":"changelog/#bug-fixes_4","text":"Catch alias resolution errors ( b734dd0 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#061-2022-02-17","text":"Compare with 0.6.0","title":"0.6.1 - 2022-02-17"},{"location":"changelog/#bug-fixes_5","text":"Don't pop from fallback config ( bde32af by Timoth\u00e9e Mazzucotelli). Fix rendering init method source when merged into class ( 4a20aea by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#060-2022-02-13","text":"Compare with 0.5.4","title":"0.6.0 - 2022-02-13"},{"location":"changelog/#features_1","text":"Add option to merge __init__ methods' docstrings into their classes' docstrings ( 1b4d1c0 by Timoth\u00e9e Mazzucotelli). Support separate attribute signature ( e962b88 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#bug-fixes_6","text":"Restore full cross-refs paths on hover ( ac11970 by Timoth\u00e9e Mazzucotelli). Fix rendering of labels ( 52919c5 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_2","text":"Don't add trailing parentheses in functions heading when separate signature ( 885696e by Timoth\u00e9e Mazzucotelli). Use more explicit template debug messages ( f2122d7 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#054-2022-02-13","text":"Compare with 0.5.3","title":"0.5.4 - 2022-02-13"},{"location":"changelog/#bug-fixes_7","text":"Don't load additional modules during fallback ( 69b8e25 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#053-2022-02-08","text":"Compare with 0.5.2","title":"0.5.3 - 2022-02-08"},{"location":"changelog/#bug-fixes_8","text":"Allow passing null as docstring style ( f526816 by Timoth\u00e9e Mazzucotelli). Issue #2","title":"Bug Fixes"},{"location":"changelog/#052-2022-02-05","text":"Compare with 0.5.1","title":"0.5.2 - 2022-02-05"},{"location":"changelog/#dependencies","text":"Require at least mkdocstrings 0.18 ( 7abdda4 by Timoth\u00e9e Mazzucotelli).","title":"Dependencies"},{"location":"changelog/#051-2022-02-03","text":"Compare with 0.5.0","title":"0.5.1 - 2022-02-03"},{"location":"changelog/#dependencies_1","text":"Depend on Griffe >= 0.11.1 ( 1303557 by Timoth\u00e9e Mazzucotelli).","title":"Dependencies"},{"location":"changelog/#code-refactoring_3","text":"Move handler into its own module ( b787e78 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#050-2022-02-03","text":"Compare with 0.4.1","title":"0.5.0 - 2022-02-03"},{"location":"changelog/#features_2","text":"Allow changing docstring style of an object ( 39240c1 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#bug-fixes_9","text":"Warn if Black is not installed when formatting signature ( b848277 by Timoth\u00e9e Mazzucotelli). Fix missing default for docstring_section_style option ( 774988e by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_4","text":"Change to new way of stripping paragraphs ( 33d4594 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#041-2022-02-01","text":"Compare with 0.4.0","title":"0.4.1 - 2022-02-01"},{"location":"changelog/#bug-fixes_10","text":"Fix docstring admonitions rendering ( a24ae2e by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#040-2022-02-01","text":"Compare with 0.3.0","title":"0.4.0 - 2022-02-01"},{"location":"changelog/#code-refactoring_5","text":"Use the new mkdocstrings_handlers namespace ( 23c9023 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#030-2022-01-14","text":"Compare with 0.2.0","title":"0.3.0 - 2022-01-14"},{"location":"changelog/#features_3","text":"Support griffe 0.10 ( 28061de by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#dependencies_2","text":"Require griffe 0.10 ( cfbd7bb by Timoth\u00e9e Mazzucotelli).","title":"Dependencies"},{"location":"changelog/#code-refactoring_6","text":"Use new logger patching utility ( 4cdb292 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#020-2021-12-28","text":"Compare with 0.1.0","title":"0.2.0 - 2021-12-28"},{"location":"changelog/#dependencies_3","text":"Depend on griffe >= 0.7.1 ( 34f7ebd by Timoth\u00e9e Mazzucotelli). Upgrade griffe, no upper bound ( 8f0aa42 by Timoth\u00e9e Mazzucotelli).","title":"Dependencies"},{"location":"changelog/#features_4","text":"Add show_signature rendering option ( 0f07c2e by Will Da Silva).","title":"Features"},{"location":"changelog/#bug-fixes_11","text":"Fix templates for named docstring elements ( 47868a1 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#010-2021-12-19","text":"Compare with first commit","title":"0.1.0 - 2021-12-19"},{"location":"changelog/#features_5","text":"Implement handler and add templates ( dbb580a by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#bug-fixes_12","text":"Fix separate signature feature ( da6e81c by Timoth\u00e9e Mazzucotelli). Fix signature template (parameters annotations) ( b34ead0 by Timoth\u00e9e Mazzucotelli). Only show source when present ( c270d68 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_7","text":"Return all known anchors ( 9bbfe14 by Timoth\u00e9e Mazzucotelli). Update for griffe 0.4.0 ( 831aabb by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd python make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run mkdocstrings-python [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd python make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run mkdocstrings-python [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"These projects were used to build mkdocstrings-python . Thank you! python | pdm | copier-pdm Runtime dependencies \u00a4 Project Summary Version (accepted) Version (last resolved) License astunparse An AST unparser for Python >=1.6; python_version < \"3.9\" 1.6.3 ? cached-property A decorator for caching properties in classes. ; python_version < \"3.8\" 1.5.2 ? click Composable command line interface toolkit >=3.3 8.1.2 BSD-3-Clause colorama Cross-platform colored terminal text. ; platform_system == \"Windows\" 0.4.4 BSD ghp-import Copy your docs directly to the gh-pages branch. >=1.0 2.0.2 Apache Software License griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. >=0.11.1 0.18.0 ISC License (ISCL) importlib-metadata Read metadata from Python packages >=4.4; python_version < \"3.10\" 4.11.3 Apache Software License jinja2 A very fast and expressive template engine. >=2.11.1 3.1.1 BSD-3-Clause markdown Python implementation of Markdown. >=3.3 3.3.6 BSD License markupsafe Safely add untrusted strings to HTML/XML markup. >=1.1 2.1.1 BSD-3-Clause mergedeep A deep merge function for \ud83d\udc0d. >=1.3.4 1.3.4 MIT License mkdocs Project documentation with Markdown. >=1.2 1.3.0 BSD mkdocs-autorefs Automatically link across pages in MkDocs. >=0.3.1 0.4.1 ISC License (ISCL) mkdocstrings Automatic documentation from sources, for MkDocs. >=0.19 0.18.1 ISC License (ISCL) mkdocstrings-python-legacy A legacy Python handler for mkdocstrings. >=0.2 0.2.2 ISC License (ISCL) packaging Core utilities for Python packages >=20.5 21.3 BSD-2-Clause or Apache-2.0 pymdown-extensions Extension pack for Python Markdown. >=6.3 9.3 MIT License pyparsing Python parsing module !=3.0.5,>=2.0.2 3.0.7 MIT License python-dateutil Extensions to the standard Python datetime module >=2.8.1 2.8.2 Dual License pytkdocs Load Python objects documentation. >=0.14 0.16.1 ISC License (ISCL) pyyaml YAML parser and emitter for Python >=3.10 6.0 MIT pyyaml-env-tag A custom YAML tag for referencing environment variables in YAML files. >=0.1 0.1 MIT License six Python 2 and 3 compatibility utilities <2.0,>=1.6.1 1.16.0 MIT typing-extensions Backported and Experimental Type Hints for Python 3.5+ >=3.7; python_version < \"3.8\" 3.10.0.2 PSF watchdog Filesystem events monitoring >=2.0 2.1.7 Apache License 2.0 wheel A built-package format for Python <1.0,>=0.23.0 0.37.1 MIT zipp Backport of pathlib-compatible object wrapper for zip files >=0.5 3.7.0 MIT License Development dependencies \u00a4 Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup ~=1.4 1.5.0 Revised BSD License astor Read/rewrite/write Python ASTs <0.9,>=0.8 0.8.1 BSD-3-Clause atomicwrites Atomic file writes. >=1.0; sys_platform == \"win32\" 1.4.0 ? attrs Classes Without Boilerplate >=19.2.0 21.4.0 MIT autoflake Removes unused imports and unused variables >=1.4 1.4 Expat License bandit Security oriented static analyser for python code. >=1.7.3 1.7.4 Apache-2.0 license black The uncompromising code formatter. >=21.10b0 22.3.0 MIT cached-property A decorator for caching properties in classes. ~=1.5; python_version < \"3.8\" 1.5.2 ? certifi Python package for providing Mozilla's CA Bundle. >=2017.4.17 2021.10.8 MPL-2.0 charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. ~=2.0.0; python_version >= \"3\" 2.0.12 MIT click Composable command line interface toolkit >=8.0.0 8.1.2 BSD-3-Clause colorama Cross-platform colored terminal text. ; platform_system == \"Windows\" 0.4.4 BSD coverage Code coverage measurement for Python [toml]>=5.2.1 6.3.2 Apache 2.0 darglint A utility for ensuring Google-style docstrings stay up to date with the source code. >=1.8 1.8.1 MIT dparse A parser for Python dependency files >=0.5.1 0.5.1 MIT license duty A simple task runner. >=0.7 0.7.0 ISC execnet execnet: rapid multi-Python deployment >=1.1 1.9.0 MIT failprint Run a command, print its output only if it fails. ~=0.8 0.8.0 ISC flake8 the modular source code checker: pep8 pyflakes and co 3.9.2 MIT flake8-bandit Automated security testing with bandit and flake8. >=2.1 3.0.0 MIT flake8-black flake8 plugin to call black as a code style validator >=0.2 0.3.2 MIT flake8-bugbear A plugin for flake8 finding likely bugs and design problems in your program. Contains warnings that don't belong in pyflakes and pycodestyle. >=21.9 22.3.23 MIT flake8-builtins Check for python builtins being used as variables or parameters. >=1.5 1.5.3 GPL version 2 flake8-comprehensions A flake8 plugin to help you write better list/set/dict comprehensions. >=3.7 3.8.0 MIT flake8-docstrings Extension for flake8 which uses pydocstyle to check docstrings >=1.6 1.6.0 MIT License flake8-plugin-utils The package provides base classes and utils for flake8 plugin writing <2.0.0,>=1.3.2 1.3.2 MIT flake8-polyfill Polyfill package for Flake8 plugins 1.0.2 MIT flake8-pytest-style A flake8 plugin checking common style issues or inconsistencies with pytest-based tests. >=1.5 1.6.0 MIT flake8-string-format string format checker, plugin for flake8 >=0.3 0.3.0 MIT License flake8-tidy-imports A flake8 plugin that helps you write tidier imports. >=4.5 4.6.0 MIT flake8-variables-names A flake8 extension that helps to make more readable variables names >=0.0 0.0.5 MIT ghp-import Copy your docs directly to the gh-pages branch. >=1.0 2.0.2 Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. >=0.4 0.5.0 ISC gitdb Git Object Database <5,>=4.0.1 4.0.9 BSD License gitpython GitPython is a python library used to interact with Git repositories >=1.0.1 3.1.27 BSD idna Internationalized Domain Names in Applications (IDNA) <4,>=2.5; python_version >= \"3\" 3.3 BSD-3-Clause importlib-metadata Read metadata from Python packages ; python_version < \"3.8\" 4.11.3 Apache Software License iniconfig iniconfig: brain-dead simple config-ini parsing 1.1.1 MIT License isort A Python utility / library to sort Python imports. >=5.10 5.10.1 MIT jinja2 A very fast and expressive template engine. <4,>=2.11 3.1.1 BSD-3-Clause markdown Python implementation of Markdown. <4.0,>=3.3 3.3.6 BSD License markdown-callouts Markdown extension: a classier syntax for admonitions >=0.2 0.2.0 MIT markdown-exec Utilities to execute code blocks in Markdown files. >=0.5 0.7.0 ISC markupsafe Safely add untrusted strings to HTML/XML markup. >=2.0 2.1.1 BSD-3-Clause mccabe McCabe checker, plugin for flake8 <0.7.0,>=0.6.0 0.6.1 Expat license mergedeep A deep merge function for \ud83d\udc0d. >=1.3.4 1.3.4 MIT License mkdocs Project documentation with Markdown. >=1.3 1.3.0 BSD mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. >=0.2 0.2.5 ISC License (ISCL) mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build >=0.3 0.3.4 MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML >=0.4 0.4.1 MIT mkdocs-material A Material Design theme for MkDocs >=7.3 8.2.8 MIT mkdocs-material-extensions Extension pack for Python Markdown. >=1.0.3 1.0.3 MIT License mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page >=0.3 0.3.4 MIT mypy Optional static typing for Python >=0.910 0.942 MIT License mypy-extensions Experimental type system extensions for programs checked with the mypy typechecker. >=0.4.3 0.4.3 MIT License packaging Core utilities for Python packages >=20.5 21.3 BSD-2-Clause or Apache-2.0 pathspec Utility library for gitignore style pattern matching of file paths. >=0.9.0 0.9.0 MPL 2.0 pbr Python Build Reasonableness !=2.1.0,>=2.0.0 5.8.1 Apache Software License pep8-naming Check PEP-8 naming conventions, plugin for flake8 >=0.12 0.12.1 Expat license platformdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". >=2 2.5.1 MIT pluggy plugin and hook calling mechanisms for python <2.0,>=0.12 1.0.0 MIT ptyprocess Run a subprocess in a pseudo terminal ~=0.6; sys_platform != \"win32\" 0.7.0 ISC License (ISCL) py library with cross-python path, ini-parsing, io, code, log facilities >=1.8.2 1.11.0 MIT license pycodestyle Python style guide checker 2.7.0 Expat license pydocstyle Python docstring style checker >=2.1 6.1.1 MIT pyflakes passive checker of Python programs >=1.1.0 2.3.1 MIT pygments Pygments is a syntax highlighting package written in Python. >=2.10 2.11.2 BSD License pymdown-extensions Extension pack for Python Markdown. >=9 9.3 MIT License pyparsing Python parsing module !=3.0.5,>=2.0.2 3.0.7 MIT License pytest pytest: simple powerful testing with Python >=6.2 7.1.1 MIT pytest-cov Pytest plugin for measuring coverage. >=3.0 3.0.0 MIT pytest-forked run tests in isolated forked subprocesses 1.4.0 MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. >=3.10 3.11.0 MIT pytest-xdist pytest xdist plugin for distributed testing and loop-on-failing modes >=2.4 2.5.0 MIT python-dateutil Extensions to the standard Python datetime module >=2.8.1 2.8.2 Dual License pyyaml YAML parser and emitter for Python >=3.10 6.0 MIT pyyaml-env-tag A custom YAML tag for referencing environment variables in YAML files. >=0.1 0.1 MIT License requests Python HTTP for Humans. 2.27.1 Apache 2.0 safety Checks installed dependencies for known vulnerabilities. >=1.10 1.10.3 MIT license semver Python helper for Semantic Versioning (http://semver.org/) ~=2.13 2.13.0 BSD setuptools Easily download, build, install, upgrade, and uninstall Python packages 61.3.0 MIT License six Python 2 and 3 compatibility utilities >=1.5 1.16.0 MIT smmap A pure Python implementation of a sliding window memory map manager <6,>=3.0.1 5.0.0 BSD snowballstemmer This package provides 29 stemmers for 28 languages generated from Snowball algorithms. 2.2.0 BSD-3-Clause stevedore Manage dynamic plugins for Python applications >=1.20.0 3.5.0 Apache Software License toml Python Library for Tom's Obvious, Minimal Language >=0.10 0.10.2 MIT tomli A lil' TOML parser >=1.1.0; python_version < \"3.11\" 2.0.1 MIT License typed-ast a fork of Python 2 and 3 ast modules with type comment support >=1.4.2; python_version < \"3.8\" and implementation_name == \"cpython\" 1.5.2 ? types-markdown Typing stubs for Markdown >=3.3 3.3.12 Apache-2.0 license types-toml Typing stubs for toml >=0.10 0.10.4 Apache-2.0 license typing-extensions Backported and Experimental Type Hints for Python 3.5+ >=3.10.0.0; python_version < \"3.10\" 3.10.0.2 PSF urllib3 HTTP library with thread-safe connection pooling, file post, and more. <1.27,>=1.21.1 1.26.9 MIT watchdog Filesystem events monitoring >=2.0 2.1.7 Apache License 2.0 wps-light The strictest and most opinionated python linter ever (lighter fork). >=0.15 0.15.3 MIT zipp Backport of pathlib-compatible object wrapper for zip files >=0.5 3.7.0 MIT License More credits from the author","title":"Credits"},{"location":"customization/","text":"Customization \u00a4 It is possible to customize the output of the generated documentation with CSS and/or by overriding templates. CSS classes \u00a4 The following CSS classes are used in the generated HTML: doc : on all the following elements doc-children : on div s containing the children of an object doc-object : on div s containing an object doc-attribute : on div s containing an attribute doc-class : on div s containing a class doc-function : on div s containing a function doc-module : on div s containing a module doc-heading : on objects headings doc-object-name : on span s wrapping objects names/paths in the heading doc-KIND-name : as above, specific to the kind of object (module, class, function, attribute) doc-contents : on div s wrapping the docstring then the children (if any) first : same, but only on the root object's contents div doc-labels : on span s wrapping the object's labels doc-label : on small elements containing a label doc-label-LABEL : same, where LABEL is replaced by the actual label Example with colorful labels CSS Result . doc-label { border-radius : 15 px ; padding : 0 5 px ; } . doc-label-special { background-color : blue ; color : white ; } . doc-label-private { background-color : red ; color : white ; } . doc-label-property { background-color : green ; color : white ; } . doc-label-read-only { background-color : yellow ; color : black ; } .lbl { border-radius: 15px; padding: 0 5px; } special private property read-only Recommended style (Material) \u00a4 Here are some CSS rules for the Material for MkDocs theme: /* Indentation. */ div . doc-contents : not ( . first ) { padding-left : 25 px ; border-left : .05 rem solid var ( --md-typeset-table-color ); } /* Mark external links as such. */ a . autorefs-external :: after { /* https://primer.style/octicons/arrow-up-right-24 */ background-image : url ( 'data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill=\"rgb(0, 0, 0)\" d=\"M18.25 15.5a.75.75 0 00.75-.75v-9a.75.75 0 00-.75-.75h-9a.75.75 0 000 1.5h7.19L6.22 16.72a.75.75 0 101.06 1.06L17.5 7.56v7.19c0 .414.336.75.75.75z\"></path></svg>' ); content : ' ' ; display : inline-block ; position : relative ; top : 0.1 em ; margin-left : 0.2 em ; margin-right : 0.1 em ; height : 1 em ; width : 1 em ; border-radius : 100 % ; background-color : var ( --md-typeset-a-color ); } a . autorefs-external : hover :: after { background-color : var ( --md-accent-fg-color ); } Recommended style (ReadTheDocs) \u00a4 Here are some CSS rules for the built-in ReadTheDocs theme: /* Indentation. */ div . doc-contents : not ( . first ) { padding-left : 25 px ; border-left : .05 rem solid rgba ( 200 , 200 , 200 , 0.2 ); } Templates \u00a4 Templates are organized into the following tree: \ud83d\udcc1 theme/ \u251c\u2500\u2500 \ud83d\udcc4 attribute.html \u251c\u2500\u2500 \ud83d\udcc4 children.html \u251c\u2500\u2500 \ud83d\udcc4 class.html \u251c\u2500\u2500 \ud83d\udcc1 docstring/ \u2502 \u251c\u2500\u2500 \ud83d\udcc4 admonition.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 attributes.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 examples.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 other_parameters.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 parameters.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 raises.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 receives.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 returns.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 warns.html \u2502 \u2514\u2500\u2500 \ud83d\udcc4 yields.html \u251c\u2500\u2500 \ud83d\udcc4 docstring.html \u251c\u2500\u2500 \ud83d\udcc4 expression.html \u251c\u2500\u2500 \ud83d\udcc4 function.html \u251c\u2500\u2500 \ud83d\udcc4 labels.html \u251c\u2500\u2500 \ud83d\udcc4 module.html \u2514\u2500\u2500 \ud83d\udcc4 signature.html See them in the repository . See the general mkdocstrings documentation to learn how to override them: https://mkdocstrings.github.io/theming/#templates . In preparation for Jinja2 blocks, which will improve customization, each one of these templates extends in fact a base version in theme/_base . Example: theme/docstring/admonition.html {% extends \"_base/docstring/admonition.html\" %} theme/_base/docstring/admonition.html {{ log.debug () }} < details class = \" {{ section.value.kind }} \" > < summary > {{ section.title | convert_markdown ( heading_level , html_id , strip_paragraph = True ) }} </ summary > {{ section.value.contents | convert_markdown ( heading_level , html_id ) }} </ details > It means you will be able to customize only parts of a template without having to fully copy-paste it in your project: templates/theme/docstring.html {% extends \"_base/docstring.html\" %} {% block contents %} {{ block .super }} Additional contents {% endblock contents %} Block-level customization is not ready yet. We welcome suggestions .","title":"Customization"},{"location":"customization/#customization","text":"It is possible to customize the output of the generated documentation with CSS and/or by overriding templates.","title":"Customization"},{"location":"customization/#css-classes","text":"The following CSS classes are used in the generated HTML: doc : on all the following elements doc-children : on div s containing the children of an object doc-object : on div s containing an object doc-attribute : on div s containing an attribute doc-class : on div s containing a class doc-function : on div s containing a function doc-module : on div s containing a module doc-heading : on objects headings doc-object-name : on span s wrapping objects names/paths in the heading doc-KIND-name : as above, specific to the kind of object (module, class, function, attribute) doc-contents : on div s wrapping the docstring then the children (if any) first : same, but only on the root object's contents div doc-labels : on span s wrapping the object's labels doc-label : on small elements containing a label doc-label-LABEL : same, where LABEL is replaced by the actual label Example with colorful labels CSS Result . doc-label { border-radius : 15 px ; padding : 0 5 px ; } . doc-label-special { background-color : blue ; color : white ; } . doc-label-private { background-color : red ; color : white ; } . doc-label-property { background-color : green ; color : white ; } . doc-label-read-only { background-color : yellow ; color : black ; } .lbl { border-radius: 15px; padding: 0 5px; }","title":"CSS classes"},{"location":"customization/#recommended-style-material","text":"Here are some CSS rules for the Material for MkDocs theme: /* Indentation. */ div . doc-contents : not ( . first ) { padding-left : 25 px ; border-left : .05 rem solid var ( --md-typeset-table-color ); } /* Mark external links as such. */ a . autorefs-external :: after { /* https://primer.style/octicons/arrow-up-right-24 */ background-image : url ( 'data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill=\"rgb(0, 0, 0)\" d=\"M18.25 15.5a.75.75 0 00.75-.75v-9a.75.75 0 00-.75-.75h-9a.75.75 0 000 1.5h7.19L6.22 16.72a.75.75 0 101.06 1.06L17.5 7.56v7.19c0 .414.336.75.75.75z\"></path></svg>' ); content : ' ' ; display : inline-block ; position : relative ; top : 0.1 em ; margin-left : 0.2 em ; margin-right : 0.1 em ; height : 1 em ; width : 1 em ; border-radius : 100 % ; background-color : var ( --md-typeset-a-color ); } a . autorefs-external : hover :: after { background-color : var ( --md-accent-fg-color ); }","title":"Recommended style (Material)"},{"location":"customization/#recommended-style-readthedocs","text":"Here are some CSS rules for the built-in ReadTheDocs theme: /* Indentation. */ div . doc-contents : not ( . first ) { padding-left : 25 px ; border-left : .05 rem solid rgba ( 200 , 200 , 200 , 0.2 ); }","title":"Recommended style (ReadTheDocs)"},{"location":"customization/#templates","text":"Templates are organized into the following tree: \ud83d\udcc1 theme/ \u251c\u2500\u2500 \ud83d\udcc4 attribute.html \u251c\u2500\u2500 \ud83d\udcc4 children.html \u251c\u2500\u2500 \ud83d\udcc4 class.html \u251c\u2500\u2500 \ud83d\udcc1 docstring/ \u2502 \u251c\u2500\u2500 \ud83d\udcc4 admonition.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 attributes.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 examples.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 other_parameters.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 parameters.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 raises.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 receives.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 returns.html \u2502 \u251c\u2500\u2500 \ud83d\udcc4 warns.html \u2502 \u2514\u2500\u2500 \ud83d\udcc4 yields.html \u251c\u2500\u2500 \ud83d\udcc4 docstring.html \u251c\u2500\u2500 \ud83d\udcc4 expression.html \u251c\u2500\u2500 \ud83d\udcc4 function.html \u251c\u2500\u2500 \ud83d\udcc4 labels.html \u251c\u2500\u2500 \ud83d\udcc4 module.html \u2514\u2500\u2500 \ud83d\udcc4 signature.html See them in the repository . See the general mkdocstrings documentation to learn how to override them: https://mkdocstrings.github.io/theming/#templates . In preparation for Jinja2 blocks, which will improve customization, each one of these templates extends in fact a base version in theme/_base . Example: theme/docstring/admonition.html {% extends \"_base/docstring/admonition.html\" %} theme/_base/docstring/admonition.html {{ log.debug () }} < details class = \" {{ section.value.kind }} \" > < summary > {{ section.title | convert_markdown ( heading_level , html_id , strip_paragraph = True ) }} </ summary > {{ section.value.contents | convert_markdown ( heading_level , html_id ) }} </ details > It means you will be able to customize only parts of a template without having to fully copy-paste it in your project: templates/theme/docstring.html {% extends \"_base/docstring.html\" %} {% block contents %} {{ block .super }} Additional contents {% endblock contents %} Block-level customization is not ready yet. We welcome suggestions .","title":"Templates"},{"location":"license/","text":"ISC License Copyright (c) 2021, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"usage/","text":"Usage \u00a4 This is the documentation for the NEW Python handler. To read the documentation for the LEGACY handler, go to the legacy handler documentation . The tool used by the Python handler to collect documentation from Python source code is Griffe . The word \"griffe\" can sometimes be used instead of \"signature\" in french. Griffe is able to visit the Abstract Syntax Tree (AST) of the source code to extract useful information. It is also able to execute the code (by importing it) and introspect objects in memory when source code is not available. Finally, it can parse docstrings following different styles, see Supported docstrings styles . Like every handler, the Python handler accepts both global and local options. Global-only options \u00a4 Some options are global only , and go directly under the handler's name. import : this option is used to import Sphinx-compatible objects inventories from other documentation sites. For example, you can import the standard library objects inventory like this: mkdocs.yml plugins : - mkdocstrings : handlers : python : import : - https://docs.python-requests.org/en/master/objects.inv When importing an inventory, you enable automatic cross-references to other documentation sites like the standard library docs or any third-party package docs. Typically, you want to import the inventories of your project's dependencies, at least those that are used in the public API. Note This global option is common to all handlers, however they might implement it differently (or not even implement it). paths : this option is used to provide filesystem paths in which to search for Python modules. Non-absolute paths are computed as relative to MkDocs configuration file. Example: mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ src ] # search packages in the src folder More details at Finding modules . Global/local options \u00a4 The other options can be used both globally and locally, under the options key. For example, globally: mkdocs.yml plugins : - mkdocstrings : handlers : python : options : do_something : true ...and locally, overriding the global configuration: docs/some_page.md ::: package.module.class options: do_something: false These options affect how the documentation is collected from sources and renderered: headings, members, docstrings, etc. Headings options: Name Type Description heading_level int The initial heading level to use. Default: 2 . show_root_heading bool Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after ::: ). Default: False . show_root_toc_entry bool If the root heading is not shown, at least add a ToC entry for it. Default: True . show_root_full_path bool Show the full Python path for the root object heading. Default: True . show_root_members_full_path bool Show the full Python path of the root members. Default: False . show_object_full_path bool Show the full Python path of every object. Default: False . show_category_heading bool When grouped by categories, show a heading for each category. Default: False . Members options: Name Type Description members list [ str ] | False | None An explicit list of members to render. Default: None . members_order str The members ordering to use. Options: alphabetical - order by the members names, source - order members as they appear in the source file. Default: \"alphabetical\" . filters list [ str ] | None A list of filters applied to filter objects based on their name. A filter starting with ! will exclude matching objects instead of including them. The members option takes precedence over filters (filters will still be applied recursively to lower members in the hierarchy). Default: [\"!^_[^_]\"] . group_by_category bool Group the object's children by categories: attributes, classes, functions, and modules. Default: True . show_submodules bool When rendering a module, show its submodules recursively. Default: False . Docstrings options: Name Type Description docstring_style str The docstring style to use: google , numpy , sphinx , or None . Default: \"google\" . docstring_options dict The options for the docstring parser. See parsers under griffe.docstrings . docstring_section_style str The style used to render docstring sections. Options: table , list , spacy . Default: \"table\" . line_length int Maximum line length when formatting code/signatures. Default: 60 . merge_init_into_class bool Whether to merge the __init__ method into the class' signature and docstring. Default: False . show_if_no_docstring bool Show the object heading even if it has no docstring or children with docstrings. Default: False . Signatures/annotations options: Name Type Description annotations_path str The verbosity for annotations path: brief (recommended), or source (as written in the source). Default: \"brief\" . show_signature bool Show methods and functions signatures. Default: True . show_signature_annotations bool Show the type annotations in methods and functions signatures. Default: False . separate_signature bool Whether to put the whole signature in a code block below the heading. Default: False . Additional options: Name Type Description show_bases bool Show the base classes of a class. Default: True . show_source bool Show the source code of this object. Default: True . Supported docstrings styles \u00a4 Griffe supports the Google-style, Numpy-style and Sphinx-style docstring formats. The style used by default is the Google-style. You can configure what style you want to use with the docstring_style and docstring_options options, both globally or locally, i.e. per autodoc instruction. Google: see Napoleon's documentation . Numpy: see Numpydoc's documentation . Sphinx: see Sphinx's documentation . See the supported docstring sections on Griffe's documentation . Note As Numpy-style is partially supported by the underlying parser, you may experience problems in the building process if your docstring has a Methods section in the class docstring (see #366 ). Google-style admonitions \u00a4 With Google-style docstrings, any section that is not recognized will be transformed into its admonition equivalent. For example: Docstring Result \"\"\" Note: It looks like a section, but it will be rendered as an admonition. Tip: You can even choose a title. This admonition has a custom title! \"\"\" Note It looks like a section, but it will be rendered as an admonition. You can even choose a title. This admonition has a custom title! Finding modules \u00a4 There are multiple ways to tell the handler where to find your packages/modules. The recommended method is to use the paths option, as it's the only one that works with the -f option of MkDocs, allowing to build the documentation from any location on the file system. Indeed, the paths provided with the paths option are computed as relative to the configuration file (mkdocs.yml), so that the current working directory has no impact on the build process: you can build the docs from any location on your filesystem . Using the paths option \u00a4 This is the recommended method. mkdocs.yml in root, package in root \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 package/ mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ . ] # actually not needed, default mkdocs.yml in root, package in subfolder \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 src/ \u2514\u2500\u2500 \ud83d\udcc1 package/ mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ src ] mkdocs.yml in subfolder, package in root \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc1 docs/ \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 package/ mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ .. ] mkdocs.yml in subfolder, package in subfolder \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc1 docs/ \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 src/ \u2514\u2500\u2500 \ud83d\udcc1 package/ mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ ../src ] Except for case 1, which is supported by default, we strongly recommend to set the path to your packages using this option, even if it works without it (for example because your project manager automatically adds src to PYTHONPATH), to make sure anyone can build your docs from any location on their filesystem. Using the PYTHONPATH environment variable \u00a4 This method has limitations. This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend to use the paths method instead. You can take advantage of the usual Python loading mechanisms. In Bash and other shells, you can run your command like this (note the prepended PYTHONPATH=... ): mkdocs.yml in root, package in root \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 package/ PYTHONPATH = . mkdocs build # actually not needed, default mkdocs.yml in root, package in subfolder \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 src/ \u2514\u2500\u2500 \ud83d\udcc1 package/ PYTHONPATH = src mkdocs build mkdocs.yml in subfolder, package in root \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc1 docs/ \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 package/ PYTHONPATH = . mkdocs build -f docs/mkdocs.yml mkdocs.yml in subfolder, package in subfolder \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc1 docs/ \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 src/ \u2514\u2500\u2500 \ud83d\udcc1 package/ PYTHONPATH = src mkdocs build -f docs/mkdocs.yml Installing your package in the current Python environment \u00a4 This method has limitations. This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend to use the paths method instead. Install your package in the current environment, and run MkDocs: pip PDM Poetry . venv/bin/activate pip install -e . mkdocs build pdm install pdm run mkdocs build poetry install poetry run mkdocs build","title":"Usage"},{"location":"usage/#usage","text":"This is the documentation for the NEW Python handler. To read the documentation for the LEGACY handler, go to the legacy handler documentation . The tool used by the Python handler to collect documentation from Python source code is Griffe . The word \"griffe\" can sometimes be used instead of \"signature\" in french. Griffe is able to visit the Abstract Syntax Tree (AST) of the source code to extract useful information. It is also able to execute the code (by importing it) and introspect objects in memory when source code is not available. Finally, it can parse docstrings following different styles, see Supported docstrings styles . Like every handler, the Python handler accepts both global and local options.","title":"Usage"},{"location":"usage/#global-only-options","text":"Some options are global only , and go directly under the handler's name. import : this option is used to import Sphinx-compatible objects inventories from other documentation sites. For example, you can import the standard library objects inventory like this: mkdocs.yml plugins : - mkdocstrings : handlers : python : import : - https://docs.python-requests.org/en/master/objects.inv When importing an inventory, you enable automatic cross-references to other documentation sites like the standard library docs or any third-party package docs. Typically, you want to import the inventories of your project's dependencies, at least those that are used in the public API. Note This global option is common to all handlers, however they might implement it differently (or not even implement it). paths : this option is used to provide filesystem paths in which to search for Python modules. Non-absolute paths are computed as relative to MkDocs configuration file. Example: mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ src ] # search packages in the src folder More details at Finding modules .","title":"Global-only options"},{"location":"usage/#globallocal-options","text":"The other options can be used both globally and locally, under the options key. For example, globally: mkdocs.yml plugins : - mkdocstrings : handlers : python : options : do_something : true ...and locally, overriding the global configuration: docs/some_page.md ::: package.module.class options: do_something: false These options affect how the documentation is collected from sources and renderered: headings, members, docstrings, etc. Headings options: Name Type Description heading_level int The initial heading level to use. Default: 2 . show_root_heading bool Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after ::: ). Default: False . show_root_toc_entry bool If the root heading is not shown, at least add a ToC entry for it. Default: True . show_root_full_path bool Show the full Python path for the root object heading. Default: True . show_root_members_full_path bool Show the full Python path of the root members. Default: False . show_object_full_path bool Show the full Python path of every object. Default: False . show_category_heading bool When grouped by categories, show a heading for each category. Default: False . Members options: Name Type Description members list [ str ] | False | None An explicit list of members to render. Default: None . members_order str The members ordering to use. Options: alphabetical - order by the members names, source - order members as they appear in the source file. Default: \"alphabetical\" . filters list [ str ] | None A list of filters applied to filter objects based on their name. A filter starting with ! will exclude matching objects instead of including them. The members option takes precedence over filters (filters will still be applied recursively to lower members in the hierarchy). Default: [\"!^_[^_]\"] . group_by_category bool Group the object's children by categories: attributes, classes, functions, and modules. Default: True . show_submodules bool When rendering a module, show its submodules recursively. Default: False . Docstrings options: Name Type Description docstring_style str The docstring style to use: google , numpy , sphinx , or None . Default: \"google\" . docstring_options dict The options for the docstring parser. See parsers under griffe.docstrings . docstring_section_style str The style used to render docstring sections. Options: table , list , spacy . Default: \"table\" . line_length int Maximum line length when formatting code/signatures. Default: 60 . merge_init_into_class bool Whether to merge the __init__ method into the class' signature and docstring. Default: False . show_if_no_docstring bool Show the object heading even if it has no docstring or children with docstrings. Default: False . Signatures/annotations options: Name Type Description annotations_path str The verbosity for annotations path: brief (recommended), or source (as written in the source). Default: \"brief\" . show_signature bool Show methods and functions signatures. Default: True . show_signature_annotations bool Show the type annotations in methods and functions signatures. Default: False . separate_signature bool Whether to put the whole signature in a code block below the heading. Default: False . Additional options: Name Type Description show_bases bool Show the base classes of a class. Default: True . show_source bool Show the source code of this object. Default: True .","title":"Global/local options"},{"location":"usage/#supported-docstrings-styles","text":"Griffe supports the Google-style, Numpy-style and Sphinx-style docstring formats. The style used by default is the Google-style. You can configure what style you want to use with the docstring_style and docstring_options options, both globally or locally, i.e. per autodoc instruction. Google: see Napoleon's documentation . Numpy: see Numpydoc's documentation . Sphinx: see Sphinx's documentation . See the supported docstring sections on Griffe's documentation . Note As Numpy-style is partially supported by the underlying parser, you may experience problems in the building process if your docstring has a Methods section in the class docstring (see #366 ).","title":"Supported docstrings styles"},{"location":"usage/#google-style-admonitions","text":"With Google-style docstrings, any section that is not recognized will be transformed into its admonition equivalent. For example: Docstring Result \"\"\" Note: It looks like a section, but it will be rendered as an admonition. Tip: You can even choose a title. This admonition has a custom title! \"\"\" Note It looks like a section, but it will be rendered as an admonition. You can even choose a title. This admonition has a custom title!","title":"Google-style admonitions"},{"location":"usage/#finding-modules","text":"There are multiple ways to tell the handler where to find your packages/modules. The recommended method is to use the paths option, as it's the only one that works with the -f option of MkDocs, allowing to build the documentation from any location on the file system. Indeed, the paths provided with the paths option are computed as relative to the configuration file (mkdocs.yml), so that the current working directory has no impact on the build process: you can build the docs from any location on your filesystem .","title":"Finding modules"},{"location":"usage/#using-the-paths-option","text":"This is the recommended method. mkdocs.yml in root, package in root \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 package/ mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ . ] # actually not needed, default mkdocs.yml in root, package in subfolder \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 src/ \u2514\u2500\u2500 \ud83d\udcc1 package/ mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ src ] mkdocs.yml in subfolder, package in root \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc1 docs/ \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 package/ mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ .. ] mkdocs.yml in subfolder, package in subfolder \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc1 docs/ \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 src/ \u2514\u2500\u2500 \ud83d\udcc1 package/ mkdocs.yml plugins : - mkdocstrings : handlers : python : paths : [ ../src ] Except for case 1, which is supported by default, we strongly recommend to set the path to your packages using this option, even if it works without it (for example because your project manager automatically adds src to PYTHONPATH), to make sure anyone can build your docs from any location on their filesystem.","title":"Using the paths option"},{"location":"usage/#using-the-pythonpath-environment-variable","text":"This method has limitations. This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend to use the paths method instead. You can take advantage of the usual Python loading mechanisms. In Bash and other shells, you can run your command like this (note the prepended PYTHONPATH=... ): mkdocs.yml in root, package in root \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 package/ PYTHONPATH = . mkdocs build # actually not needed, default mkdocs.yml in root, package in subfolder \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 src/ \u2514\u2500\u2500 \ud83d\udcc1 package/ PYTHONPATH = src mkdocs build mkdocs.yml in subfolder, package in root \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc1 docs/ \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 package/ PYTHONPATH = . mkdocs build -f docs/mkdocs.yml mkdocs.yml in subfolder, package in subfolder \ud83d\udcc1 root/ \u251c\u2500\u2500 \ud83d\udcc1 docs/ \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml \u2514\u2500\u2500 \ud83d\udcc1 src/ \u2514\u2500\u2500 \ud83d\udcc1 package/ PYTHONPATH = src mkdocs build -f docs/mkdocs.yml","title":"Using the PYTHONPATH environment variable"},{"location":"usage/#installing-your-package-in-the-current-python-environment","text":"This method has limitations. This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend to use the paths method instead. Install your package in the current environment, and run MkDocs: pip PDM Poetry . venv/bin/activate pip install -e . mkdocs build pdm install pdm run mkdocs build poetry install poetry run mkdocs build","title":"Installing your package in the current Python environment"},{"location":"reference/SUMMARY/","text":"mkdocstrings_handlers python handler rendering","title":"SUMMARY"},{"location":"reference/mkdocstrings_handlers/python/","text":"This package implements a handler for the Python language. get_handler \u00a4 get_handler ( theme , custom_templates = None , config_file_path = None , paths = None , ** config ) Simply return an instance of PythonHandler . Parameters: Name Type Description Default theme str The theme to use when rendering contents. required custom_templates Optional [ str ] Directory containing custom templates. None config_file_path str | None The MkDocs configuration file path. None paths list [ str ] | None A list of paths to use as Griffe search paths. None **config Any Configuration passed to the handler. {} Returns: Type Description PythonHandler An instance of PythonHandler .","title":"python"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.get_handler","text":"get_handler ( theme , custom_templates = None , config_file_path = None , paths = None , ** config ) Simply return an instance of PythonHandler . Parameters: Name Type Description Default theme str The theme to use when rendering contents. required custom_templates Optional [ str ] Directory containing custom templates. None config_file_path str | None The MkDocs configuration file path. None paths list [ str ] | None A list of paths to use as Griffe search paths. None **config Any Configuration passed to the handler. {} Returns: Type Description PythonHandler An instance of PythonHandler .","title":"get_handler()"},{"location":"reference/mkdocstrings_handlers/python/handler/","text":"This module implements a handler for the Python language. PythonHandler \u00a4 PythonHandler ( * args , config_file_path = None , paths = None , ** kwargs ) Bases: BaseHandler The Python handler class. Attributes: Name Type Description domain str The cross-documentation domain/language for this handler. enable_inventory bool Whether this handler is interested in enabling the creation of the objects.inv Sphinx inventory file. fallback_theme The fallback theme. fallback_config dict The configuration used to collect item during autorefs fallback. default_config dict The default rendering options, see default_config . Parameters: Name Type Description Default *args Any Handler name, theme and custom templates. () config_file_path str | None The MkDocs configuration file path. None paths list [ str ] | None A list of paths to use as Griffe search paths. None **kwargs Any Same thing, but with keyword arguments. {} default_config class-attribute \u00a4 default_config : dict = { \"docstring_style\" : \"google\" , \"docstring_options\" : {}, \"show_root_heading\" : False , \"show_root_toc_entry\" : True , \"show_root_full_path\" : True , \"show_root_members_full_path\" : False , \"show_object_full_path\" : False , \"show_category_heading\" : False , \"show_if_no_docstring\" : False , \"show_signature\" : True , \"show_signature_annotations\" : False , \"separate_signature\" : False , \"line_length\" : 60 , \"merge_init_into_class\" : False , \"show_source\" : True , \"show_bases\" : True , \"show_submodules\" : False , \"group_by_category\" : True , \"heading_level\" : 2 , \"members_order\" : rendering . Order . alphabetical . value , \"docstring_section_style\" : \"table\" , \"members\" : None , \"filters\" : [ \"!^_[^_]\" ], \"annotations_path\" : \"brief\" , } Headings options: Name Type Description heading_level int The initial heading level to use. Default: 2 . show_root_heading bool Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after ::: ). Default: False . show_root_toc_entry bool If the root heading is not shown, at least add a ToC entry for it. Default: True . show_root_full_path bool Show the full Python path for the root object heading. Default: True . show_root_members_full_path bool Show the full Python path of the root members. Default: False . show_object_full_path bool Show the full Python path of every object. Default: False . show_category_heading bool When grouped by categories, show a heading for each category. Default: False . Members options: Name Type Description members list [ str ] | False | None An explicit list of members to render. Default: None . members_order str The members ordering to use. Options: alphabetical - order by the members names, source - order members as they appear in the source file. Default: \"alphabetical\" . filters list [ str ] | None A list of filters applied to filter objects based on their name. A filter starting with ! will exclude matching objects instead of including them. The members option takes precedence over filters (filters will still be applied recursively to lower members in the hierarchy). Default: [\"!^_[^_]\"] . group_by_category bool Group the object's children by categories: attributes, classes, functions, and modules. Default: True . show_submodules bool When rendering a module, show its submodules recursively. Default: False . Docstrings options: Name Type Description docstring_style str The docstring style to use: google , numpy , sphinx , or None . Default: \"google\" . docstring_options dict The options for the docstring parser. See parsers under griffe.docstrings . docstring_section_style str The style used to render docstring sections. Options: table , list , spacy . Default: \"table\" . line_length int Maximum line length when formatting code/signatures. Default: 60 . merge_init_into_class bool Whether to merge the __init__ method into the class' signature and docstring. Default: False . show_if_no_docstring bool Show the object heading even if it has no docstring or children with docstrings. Default: False . Signatures/annotations options: Name Type Description annotations_path str The verbosity for annotations path: brief (recommended), or source (as written in the source). Default: \"brief\" . show_signature bool Show methods and functions signatures. Default: True . show_signature_annotations bool Show the type annotations in methods and functions signatures. Default: False . separate_signature bool Whether to put the whole signature in a code block below the heading. Default: False . Additional options: Name Type Description show_bases bool Show the base classes of a class. Default: True . show_source bool Show the source code of this object. Default: True . load_inventory classmethod \u00a4 load_inventory ( in_file , url , base_url = None , ** kwargs ) Yield items and their URLs from an inventory file streamed from in_file . This implements mkdocstrings' load_inventory \"protocol\" (see mkdocstrings.plugin ). Parameters: Name Type Description Default in_file BinaryIO The binary file-like object to read the inventory from. required url str The URL that this file is being streamed from (used to guess base_url ). required base_url Optional [ str ] The URL that this inventory's sub-paths are relative to. None **kwargs Any Ignore additional arguments passed from the config. {} Yields: Type Description Iterator [ Tuple [ str , str ]] Tuples of (item identifier, item URL). get_handler \u00a4 get_handler ( theme , custom_templates = None , config_file_path = None , paths = None , ** config ) Simply return an instance of PythonHandler . Parameters: Name Type Description Default theme str The theme to use when rendering contents. required custom_templates Optional [ str ] Directory containing custom templates. None config_file_path str | None The MkDocs configuration file path. None paths list [ str ] | None A list of paths to use as Griffe search paths. None **config Any Configuration passed to the handler. {} Returns: Type Description PythonHandler An instance of PythonHandler .","title":"handler"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.PythonHandler","text":"PythonHandler ( * args , config_file_path = None , paths = None , ** kwargs ) Bases: BaseHandler The Python handler class. Attributes: Name Type Description domain str The cross-documentation domain/language for this handler. enable_inventory bool Whether this handler is interested in enabling the creation of the objects.inv Sphinx inventory file. fallback_theme The fallback theme. fallback_config dict The configuration used to collect item during autorefs fallback. default_config dict The default rendering options, see default_config . Parameters: Name Type Description Default *args Any Handler name, theme and custom templates. () config_file_path str | None The MkDocs configuration file path. None paths list [ str ] | None A list of paths to use as Griffe search paths. None **kwargs Any Same thing, but with keyword arguments. {}","title":"PythonHandler"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.PythonHandler.default_config","text":"default_config : dict = { \"docstring_style\" : \"google\" , \"docstring_options\" : {}, \"show_root_heading\" : False , \"show_root_toc_entry\" : True , \"show_root_full_path\" : True , \"show_root_members_full_path\" : False , \"show_object_full_path\" : False , \"show_category_heading\" : False , \"show_if_no_docstring\" : False , \"show_signature\" : True , \"show_signature_annotations\" : False , \"separate_signature\" : False , \"line_length\" : 60 , \"merge_init_into_class\" : False , \"show_source\" : True , \"show_bases\" : True , \"show_submodules\" : False , \"group_by_category\" : True , \"heading_level\" : 2 , \"members_order\" : rendering . Order . alphabetical . value , \"docstring_section_style\" : \"table\" , \"members\" : None , \"filters\" : [ \"!^_[^_]\" ], \"annotations_path\" : \"brief\" , } Headings options: Name Type Description heading_level int The initial heading level to use. Default: 2 . show_root_heading bool Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after ::: ). Default: False . show_root_toc_entry bool If the root heading is not shown, at least add a ToC entry for it. Default: True . show_root_full_path bool Show the full Python path for the root object heading. Default: True . show_root_members_full_path bool Show the full Python path of the root members. Default: False . show_object_full_path bool Show the full Python path of every object. Default: False . show_category_heading bool When grouped by categories, show a heading for each category. Default: False . Members options: Name Type Description members list [ str ] | False | None An explicit list of members to render. Default: None . members_order str The members ordering to use. Options: alphabetical - order by the members names, source - order members as they appear in the source file. Default: \"alphabetical\" . filters list [ str ] | None A list of filters applied to filter objects based on their name. A filter starting with ! will exclude matching objects instead of including them. The members option takes precedence over filters (filters will still be applied recursively to lower members in the hierarchy). Default: [\"!^_[^_]\"] . group_by_category bool Group the object's children by categories: attributes, classes, functions, and modules. Default: True . show_submodules bool When rendering a module, show its submodules recursively. Default: False . Docstrings options: Name Type Description docstring_style str The docstring style to use: google , numpy , sphinx , or None . Default: \"google\" . docstring_options dict The options for the docstring parser. See parsers under griffe.docstrings . docstring_section_style str The style used to render docstring sections. Options: table , list , spacy . Default: \"table\" . line_length int Maximum line length when formatting code/signatures. Default: 60 . merge_init_into_class bool Whether to merge the __init__ method into the class' signature and docstring. Default: False . show_if_no_docstring bool Show the object heading even if it has no docstring or children with docstrings. Default: False . Signatures/annotations options: Name Type Description annotations_path str The verbosity for annotations path: brief (recommended), or source (as written in the source). Default: \"brief\" . show_signature bool Show methods and functions signatures. Default: True . show_signature_annotations bool Show the type annotations in methods and functions signatures. Default: False . separate_signature bool Whether to put the whole signature in a code block below the heading. Default: False . Additional options: Name Type Description show_bases bool Show the base classes of a class. Default: True . show_source bool Show the source code of this object. Default: True .","title":"default_config"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.PythonHandler.load_inventory","text":"load_inventory ( in_file , url , base_url = None , ** kwargs ) Yield items and their URLs from an inventory file streamed from in_file . This implements mkdocstrings' load_inventory \"protocol\" (see mkdocstrings.plugin ). Parameters: Name Type Description Default in_file BinaryIO The binary file-like object to read the inventory from. required url str The URL that this file is being streamed from (used to guess base_url ). required base_url Optional [ str ] The URL that this inventory's sub-paths are relative to. None **kwargs Any Ignore additional arguments passed from the config. {} Yields: Type Description Iterator [ Tuple [ str , str ]] Tuples of (item identifier, item URL).","title":"load_inventory()"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.get_handler","text":"get_handler ( theme , custom_templates = None , config_file_path = None , paths = None , ** config ) Simply return an instance of PythonHandler . Parameters: Name Type Description Default theme str The theme to use when rendering contents. required custom_templates Optional [ str ] Directory containing custom templates. None config_file_path str | None The MkDocs configuration file path. None paths list [ str ] | None A list of paths to use as Griffe search paths. None **config Any Configuration passed to the handler. {} Returns: Type Description PythonHandler An instance of PythonHandler .","title":"get_handler()"},{"location":"reference/mkdocstrings_handlers/python/rendering/","text":"This module implements rendering utilities. Order \u00a4 Bases: enum . Enum Enumeration for the possible members ordering. do_crossref \u00a4 do_crossref ( path , brief = True ) Filter to create cross-references. Parameters: Name Type Description Default path str The path to link to. required brief bool Show only the last part of the path, add full path as hover. True Returns: Type Description Markup Markup text. do_filter_objects \u00a4 do_filter_objects ( objects_dictionary , filters = None , members_list = None , keep_no_docstrings = True , ) Filter a dictionary of objects based on their docstrings. Parameters: Name Type Description Default objects_dictionary dict [ str , Object | Alias ] The dictionary of objects. required filters list [ tuple [ bool , Pattern ]] | None Filters to apply, based on members' names. Each element is a tuple: a pattern, and a boolean indicating whether to reject the object if the pattern matches. None members_list list [ str ] | None An optional, explicit list of members to keep. When given and empty, return an empty list. When given and not empty, ignore filters and docstrings presence/absence. None keep_no_docstrings bool Whether to keep objects with no/empty docstrings (recursive check). True Returns: Type Description list [ Object | Alias ] A list of objects. do_format_code \u00a4 do_format_code ( code , line_length ) Format code using Black. Parameters: Name Type Description Default code str The code to format. required line_length int The line length to give to Black. required Returns: Type Description str The same code, formatted. do_format_signature \u00a4 do_format_signature ( signature , line_length ) Format a signature using Black. Parameters: Name Type Description Default signature str The signature to format. required line_length int The line length to give to Black. required Returns: Type Description str The same code, formatted. do_multi_crossref \u00a4 do_multi_crossref ( text , code = True ) Filter to create cross-references. Parameters: Name Type Description Default text str The text to scan. required code bool Whether to wrap the result in a code tag. True Returns: Type Description Markup Markup text. do_order_members \u00a4 do_order_members ( members , order , members_list ) Order members given an ordering method. Parameters: Name Type Description Default members Sequence [ Object | Alias ] The members to order. required order Order The ordering method. required members_list list [ str ] | None An optional member list (manual ordering). required Returns: Type Description Sequence [ Object | Alias ] The same members, ordered.","title":"rendering"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.Order","text":"Bases: enum . Enum Enumeration for the possible members ordering.","title":"Order"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_crossref","text":"do_crossref ( path , brief = True ) Filter to create cross-references. Parameters: Name Type Description Default path str The path to link to. required brief bool Show only the last part of the path, add full path as hover. True Returns: Type Description Markup Markup text.","title":"do_crossref()"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_filter_objects","text":"do_filter_objects ( objects_dictionary , filters = None , members_list = None , keep_no_docstrings = True , ) Filter a dictionary of objects based on their docstrings. Parameters: Name Type Description Default objects_dictionary dict [ str , Object | Alias ] The dictionary of objects. required filters list [ tuple [ bool , Pattern ]] | None Filters to apply, based on members' names. Each element is a tuple: a pattern, and a boolean indicating whether to reject the object if the pattern matches. None members_list list [ str ] | None An optional, explicit list of members to keep. When given and empty, return an empty list. When given and not empty, ignore filters and docstrings presence/absence. None keep_no_docstrings bool Whether to keep objects with no/empty docstrings (recursive check). True Returns: Type Description list [ Object | Alias ] A list of objects.","title":"do_filter_objects()"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_format_code","text":"do_format_code ( code , line_length ) Format code using Black. Parameters: Name Type Description Default code str The code to format. required line_length int The line length to give to Black. required Returns: Type Description str The same code, formatted.","title":"do_format_code()"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_format_signature","text":"do_format_signature ( signature , line_length ) Format a signature using Black. Parameters: Name Type Description Default signature str The signature to format. required line_length int The line length to give to Black. required Returns: Type Description str The same code, formatted.","title":"do_format_signature()"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_multi_crossref","text":"do_multi_crossref ( text , code = True ) Filter to create cross-references. Parameters: Name Type Description Default text str The text to scan. required code bool Whether to wrap the result in a code tag. True Returns: Type Description Markup Markup text.","title":"do_multi_crossref()"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_order_members","text":"do_order_members ( members , order , members_list ) Order members given an ordering method. Parameters: Name Type Description Default members Sequence [ Object | Alias ] The members to order. required order Order The ordering method. required members_list list [ str ] | None An optional member list (manual ordering). required Returns: Type Description Sequence [ Object | Alias ] The same members, ordered.","title":"do_order_members()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}