{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Overview","text":"mkdocstrings-python <p>A Python handler for mkdocstrings.</p> <p> </p> <p></p> <p>The Python handler uses Griffe to collect documentation from Python source code. The word \"griffe\" can sometimes be used instead of \"signature\" in French. Griffe is able to visit the Abstract Syntax Tree (AST) of the source code to extract useful information. It is also able to execute the code (by importing it) and introspect objects in memory when source code is not available. Finally, it can parse docstrings following different styles.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install this handler as a mkdocstrings extra:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n\"mkdocstrings[python]&gt;=0.18\",\n]\n</code></pre> <p>You can also explicitly depend on the handler:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n\"mkdocstrings-python\",\n]\n</code></pre>"},{"location":"#preview","title":"Preview","text":""},{"location":"#features","title":"Features","text":"<ul> <li> <p>Data collection from source code: collection of the object-tree and the docstrings is done thanks to   Griffe.</p> </li> <li> <p>Support for type annotations: Griffe collects your type annotations and mkdocstrings uses them   to display parameter types or return types. It is even able to automatically add cross-references   to other objects from your API, from the standard library or third-party libraries!   See how to load inventories to enable it.</p> </li> <li> <p>Recursive documentation of Python objects: just use the module dotted-path as an identifier, and you get the full   module docs. You don't need to inject documentation for each class, function, etc.</p> </li> <li> <p>Support for documented attributes: attributes (variables) followed by a docstring (triple-quoted string) will   be recognized by Griffe in modules, classes and even in <code>__init__</code> methods.</p> </li> <li> <p>Multiple docstring-styles support: common support for Google-style, Numpydoc-style,   and Sphinx-style docstrings. See Griffe's documentation on docstrings support.</p> </li> <li> <p>Admonition support in Google docstrings: blocks like <code>Note:</code> or <code>Warning:</code> will be transformed   to their admonition equivalent.   We do not support nested admonitions in docstrings!</p> </li> <li> <p>Every object has a TOC entry: we render a heading for each object, meaning MkDocs picks them into the Table   of Contents, which is nicely displayed by the Material theme. Thanks to mkdocstrings cross-reference ability,   you can reference other objects within your docstrings, with the classic Markdown syntax:   <code>[this object][package.module.object]</code> or directly with <code>[package.module.object][]</code></p> </li> <li> <p>Source code display: mkdocstrings can add a collapsible div containing the highlighted source code   of the Python object.</p> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#112-2023-06-04","title":"1.1.2 - 2023-06-04","text":"<p>Compare with 1.1.1</p>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Keep headings style consistent (CSS) (92032e5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#111-2023-06-04","title":"1.1.1 - 2023-06-04","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix mkdocs and readthedocs themes support (14f18b2 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Improve display of paragraphs in docstring sections (439f5e6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#110-2023-05-25","title":"1.1.0 - 2023-05-25","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Support custom templates through objects' extra data (8ff2b06 by Timoth\u00e9e Mazzucotelli). PR #70</li> </ul>"},{"location":"changelog/#100-2023-05-11","title":"1.0.0 - 2023-05-11","text":"<p>Compare with 0.10.1</p>"},{"location":"changelog/#breaking-changes","title":"Breaking changes","text":"<ul> <li> <p>The signature of the <code>format_signature</code> filter has changed.     If you override templates in your project to customize the output,     make sure to update the following templates so that they use     the new filter signature:</p> <ul> <li><code>class.html</code></li> <li><code>expression.html</code></li> <li><code>function.html</code></li> <li><code>signature.html</code></li> </ul> <p>You can see how to use the filter in this commit's changes: f686f4e4.</p> </li> </ul> <p>We take this as an opportunity to go out of beta and bump the version to 1.0.0. This will allow users to rely on semantic versioning.</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Bring compatibility with insiders signature crossrefs feature (f686f4e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0101-2023-05-07","title":"0.10.1 - 2023-05-07","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Format signatures with full-path names (685512d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0100-2023-05-07","title":"0.10.0 - 2023-05-07","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add option to disallow inspection (40f2f26 by Nyuan Zhang). Issue #68, PR #69</li> </ul>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Make admonitions open by default (79cd153 by Timoth\u00e9e Mazzucotelli). Issue #22</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Match documented behavior for filtering (all members, list, none) (c7f70c3 by Timoth\u00e9e Mazzucotelli).</li> <li>Switch to an info level log for when black's not installed (f593bb0 by Faster Speeding).</li> <li>Return anchors as a set (e2b820c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#090-2023-04-03","title":"0.9.0 - 2023-04-03","text":"<p>Compare with 0.8.3</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Allow resolving alias to external modules (02052e2 by Gilad). PR #61, Follow-up of PR #60</li> <li>Allow pre-loading modules (36002cb by Gilad). Issue mkdocstrings/mkdocstrings#503, PR #60</li> <li>Add show options for docstrings (a6c55fb by Jeremy Goh). Issue mkdocstrings/mkdocstrings#466, PR #56</li> <li>Allow custom list of domains for inventories (f5ea6fd by Sorin Sbarnea). Issue mkdocstrings/mkdocstrings#510, PR #49</li> </ul>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Prevent alias resolution error when searching for anchors (a190e2c by Timoth\u00e9e Mazzucotelli). Issue #64</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Support Griffe 0.26 (075735c by Timoth\u00e9e Mazzucotelli).</li> <li>Log (debug) unresolved aliases (9164742 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#083-2023-01-04","title":"0.8.3 - 2023-01-04","text":"<p>Compare with 0.8.2</p>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Change \"unresolved aliases\" log level to DEBUG (dccb818 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#082-2022-11-19","title":"0.8.2 - 2022-11-19","text":"<p>Compare with 0.8.1</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Fix base directory used to expand globs (34cfa4b by Florian Hofer). PR #45</li> </ul>"},{"location":"changelog/#081-2022-11-19","title":"0.8.1 - 2022-11-19","text":"<p>Compare with 0.8.0</p>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Expand globs relative to configuration file path (0dc45ae by David Vegh). Issue #42, PR #43</li> </ul>"},{"location":"changelog/#080-2022-11-13","title":"0.8.0 - 2022-11-13","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add support for globs in paths configuration (29edd02 by Andrew Guenther). Issue #33, PR #34</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Support Griffe 0.24 (3b9f701 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#071-2022-06-12","title":"0.7.1 - 2022-06-12","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Fix rendering of <code>/</code> in signatures (3e927e4 by Timoth\u00e9e Mazzucotelli). Issue #25</li> </ul>"},{"location":"changelog/#070-2022-05-28","title":"0.7.0 - 2022-05-28","text":"<p>Compare with 0.6.6</p>"},{"location":"changelog/#packaging-dependencies","title":"Packaging / Dependencies","text":"<ul> <li>Depend on mkdocstrings 0.19 (b6a9a47 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add config option for annotations paths verbosity (b6c9893 by Timoth\u00e9e Mazzucotelli).</li> <li>Use sections titles in SpaCy-styled docstrings (fe16b54 by Timoth\u00e9e Mazzucotelli).</li> <li>Wrap objects names in spans to allow custom styling (0822ff9 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#240</li> <li>Add Jinja blocks around docstring section styles (aaa79ee by Timoth\u00e9e Mazzucotelli).</li> <li>Add members and filters options (24a6136 by Timoth\u00e9e Mazzucotelli).</li> <li>Add paths option (dd41182 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#311, PR #20</li> </ul>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix CSS class on labels (312a709 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix categories rendering (6407cf4 by Timoth\u00e9e Mazzucotelli). Issue #14</li> </ul>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Disable <code>show_submodules</code> by default (480d0c3 by Timoth\u00e9e Mazzucotelli).</li> <li>Merge default configuration options in handler (347ce76 by Timoth\u00e9e Mazzucotelli).</li> <li>Reduce number of template debug logs (8fed314 by Timoth\u00e9e Mazzucotelli).</li> <li>Respect <code>show_root_full_path</code> for ToC entries (hidden headings) (8f4c853 by Timoth\u00e9e Mazzucotelli).</li> <li>Bring consistency on headings style (59104c4 by Timoth\u00e9e Mazzucotelli).</li> <li>Stop using deprecated base classes (d5ea1c5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#066-2022-03-06","title":"0.6.6 - 2022-03-06","text":"<p>Compare with 0.6.5</p>"},{"location":"changelog/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>Always hide <code>self</code> and <code>cls</code> parameters (7f579d1 by Timoth\u00e9e Mazzucotelli). Issue #7</li> <li>Use <code>pycon</code> for examples code blocks (6545900 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#065-2022-02-24","title":"0.6.5 - 2022-02-24","text":"<p>Compare with 0.6.4</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Don't escape signatures return annotations (ac54bfc by Timoth\u00e9e Mazzucotelli). Issue #6</li> </ul>"},{"location":"changelog/#064-2022-02-22","title":"0.6.4 - 2022-02-22","text":"<p>Compare with 0.6.3</p>"},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Fix rendering of signature return annotation (b92ba3b by Timoth\u00e9e Mazzucotelli). Issue #4</li> </ul>"},{"location":"changelog/#063-2022-02-20","title":"0.6.3 - 2022-02-20","text":"<p>Compare with 0.6.2</p>"},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fix examples rendering (a06a7e3 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/griffe#46</li> </ul>"},{"location":"changelog/#062-2022-02-17","title":"0.6.2 - 2022-02-17","text":"<p>Compare with 0.6.1</p>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Catch alias resolution errors (b734dd0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#061-2022-02-17","title":"0.6.1 - 2022-02-17","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Don't pop from fallback config (bde32af by Timoth\u00e9e Mazzucotelli).</li> <li>Fix rendering init method source when merged into class (4a20aea by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#060-2022-02-13","title":"0.6.0 - 2022-02-13","text":"<p>Compare with 0.5.4</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Add option to merge <code>__init__</code> methods' docstrings into their classes' docstrings (1b4d1c0 by Timoth\u00e9e Mazzucotelli).</li> <li>Support separate attribute signature (e962b88 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Restore full cross-refs paths on hover (ac11970 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix rendering of labels (52919c5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_8","title":"Code Refactoring","text":"<ul> <li>Don't add trailing parentheses in functions heading when separate signature (885696e by Timoth\u00e9e Mazzucotelli).</li> <li>Use more explicit template debug messages (f2122d7 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#054-2022-02-13","title":"0.5.4 - 2022-02-13","text":"<p>Compare with 0.5.3</p>"},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Don't load additional modules during fallback (69b8e25 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#053-2022-02-08","title":"0.5.3 - 2022-02-08","text":"<p>Compare with 0.5.2</p>"},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Allow passing <code>null</code> as docstring style (f526816 by Timoth\u00e9e Mazzucotelli). Issue #2</li> </ul>"},{"location":"changelog/#052-2022-02-05","title":"0.5.2 - 2022-02-05","text":"<p>Compare with 0.5.1</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Require at least mkdocstrings 0.18 (7abdda4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#051-2022-02-03","title":"0.5.1 - 2022-02-03","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Depend on Griffe &gt;= 0.11.1 (1303557 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_9","title":"Code Refactoring","text":"<ul> <li>Move handler into its own module (b787e78 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#050-2022-02-03","title":"0.5.0 - 2022-02-03","text":"<p>Compare with 0.4.1</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Allow changing docstring style of an object (39240c1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Warn if Black is not installed when formatting signature (b848277 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix missing default for <code>docstring_section_style</code> option (774988e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_10","title":"Code Refactoring","text":"<ul> <li>Change to new way of stripping paragraphs (33d4594 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#041-2022-02-01","title":"0.4.1 - 2022-02-01","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Fix docstring admonitions rendering (a24ae2e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#040-2022-02-01","title":"0.4.0 - 2022-02-01","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#code-refactoring_11","title":"Code Refactoring","text":"<ul> <li>Use the new <code>mkdocstrings_handlers</code> namespace (23c9023 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#030-2022-01-14","title":"0.3.0 - 2022-01-14","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Support griffe 0.10 (28061de by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#dependencies_2","title":"Dependencies","text":"<ul> <li>Require griffe 0.10 (cfbd7bb by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_12","title":"Code Refactoring","text":"<ul> <li>Use new logger patching utility (4cdb292 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2021-12-28","title":"0.2.0 - 2021-12-28","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#dependencies_3","title":"Dependencies","text":"<ul> <li>Depend on griffe &gt;= 0.7.1 (34f7ebd by Timoth\u00e9e Mazzucotelli).</li> <li>Upgrade griffe, no upper bound (8f0aa42 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Add <code>show_signature</code> rendering option (0f07c2e by Will Da Silva).</li> </ul>"},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Fix templates for named docstring elements (47868a1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2021-12-19","title":"0.1.0 - 2021-12-19","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Implement handler and add templates (dbb580a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>Fix separate signature feature (da6e81c by Timoth\u00e9e Mazzucotelli).</li> <li>Fix signature template (parameters annotations) (b34ead0 by Timoth\u00e9e Mazzucotelli).</li> <li>Only show source when present (c270d68 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_13","title":"Code Refactoring","text":"<ul> <li>Return all known anchors (9bbfe14 by Timoth\u00e9e Mazzucotelli).</li> <li>Update for griffe 0.4.0 (831aabb by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd python\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following:</p> <ol> <li><code>export PYTHON_VERSIONS=</code>: this will run the task    with only the current Python version</li> <li>run the task directly with <code>pdm run duty TASK</code></li> </ol> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git checkout -b feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash master\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":"<p><p>These projects were used to build mkdocstrings-python. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p> </p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>cached-property</code> A decorator for caching properties in classes. <code>; python_version &lt; \"3.8\"</code> <code>1.5.2</code> ? <code>click</code> Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.3</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.24</code> <code>0.29.0</code> ISC <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.6; python_version &lt; \"3.10\"</code> <code>6.6.0</code> ? <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.2</code> BSD-3-Clause <code>markdown</code> Python implementation of Markdown. <code>&gt;=3.3</code> <code>3.3.7</code> BSD License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=1.1</code> <code>2.1.2</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.2</code> <code>1.4.3</code> BSD License <code>mkdocs-autorefs</code> Automatically link across pages in MkDocs. <code>&gt;=0.3.1</code> <code>0.4.1</code> ISC License (ISCL) <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>&gt;=0.20</code> <code>0.22.0</code> ISC <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>23.1</code> BSD License <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=6.3</code> <code>10.0.1</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>6.0</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=4.1; python_version &lt; \"3.10\"</code> <code>4.6.3</code> Python Software Foundation License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.15.0</code> ?"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>babel</code> Internationalization utilities <code>&gt;=2.10.3</code> <code>2.12.1</code> BSD <code>beautifulsoup4</code> Screen-scraping library <code>4.12.2</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=23.1</code> <code>23.3.0</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.13</code> <code>1.13.0</code> MIT <code>cached-property</code> A decorator for caching properties in classes. <code>&gt;=1.5; python_version &lt; \"3.8\"</code> <code>1.5.2</code> ? <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.5.7</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.1.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.3</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.2.7</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>cssselect</code> cssselect parses CSS3 Selectors and translates them to XPath 1.0 <code>&gt;=1.2.0</code> <code>1.2.0</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.2</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>0.11.1</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.1</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>1.9.0</code> MIT <code>failprint</code> Run a command, print its output only if it fails. <code>&gt;=0.11</code> <code>0.11.1</code> ISC <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=1.0</code> <code>1.0.1</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.10</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.31</code> BSD <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>; python_version &lt; \"3.8\"</code> <code>6.6.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>lxml</code> Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. <code>&gt;=4.6</code> <code>4.9.2</code> BSD-3-Clause <code>markdown</code> Python implementation of Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.3.7</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.2</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=0.5</code> <code>1.6.0.1.0.0</code> ISC <code>markdown2</code> A fast and complete Python implementation of Markdown <code>&gt;=2.4.3</code> <code>2.4.8</code> MIT <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.2</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.3</code> <code>1.4.3</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=0.2</code> <code>0.2.7</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.3</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page <code>&gt;=1.1</code> <code>1.1.2</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.4</code> <code>0.6.0</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=7.3</code> <code>9.1.15+insiders.4.35.3</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>&gt;=1.1</code> <code>1.1.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.6.4</code> <code>0.6.4</code> MIT <code>mypy</code> Optional static typing for Python <code>&gt;=0.911</code> <code>1.3.0</code> MIT License <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.1</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>&gt;=0.5.6</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>pipdeptree</code> Command line utility to show dependency tree of packages. <code>&gt;=2.3</code> <code>2.7.1</code> MIT License <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>3.5.1</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.0.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>&gt;=2.14</code> <code>2.15.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.0.1</code> MIT License <code>pyquery</code> A jquery-like library for python <code>&gt;=1.2</code> <code>2.0.0</code> BSD <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=6.2</code> <code>7.3.1</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=3.0</code> <code>4.1.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.10</code> <code>3.12.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=2.4</code> <code>3.3.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2023.3</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>readtime</code> Calculates the time some text takes the average human to read, based on Medium's read time forumula <code>&gt;=2.0</code> <code>2.0.0</code> BSD <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4.24</code> <code>2023.5.5</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.17.31</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.12\"</code> <code>0.2.7</code> MIT <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;=0.0.246</code> <code>0.0.270</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (http://semver.org/) <code>~=2.13</code> <code>2.13.0</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>67.8.0</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.0</code> BSD <code>soupsieve</code> A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.4.1</code> MIT License <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=1.1.0; python_version &lt; \"3.11\"</code> <code>2.0.1</code> ? <code>typed-ast</code> a fork of Python 2 and 3 ast modules with type comment support <code>&gt;=1.4.2; python_version &lt; \"3.8\" and implementation_name == \"cpython\"</code> <code>1.5.4</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.3</code> <code>3.4.2.9</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.10</code> Apache-2.0 license <code>types-toml</code> Typing stubs for toml <code>&gt;=0.10</code> <code>0.10.8.6</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=3.10.0.0; python_version &lt; \"3.10\"</code> <code>4.6.3</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.0.2</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.15.0</code> ? <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2021, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"insiders/","title":"Insiders","text":"<p>mkdocstrings-python follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>mkdocstrings-python Insiders is a private fork of mkdocstrings-python, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are made collaborators of this repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into mkdocstrings-python and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships.</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate access to 2 additional features that you can start using right away, and which are currently exclusively available to sponsors:</p> <ul> <li> Symbol types in headings and table of contents </li> <li> Cross-references for type annotations in signatures </li> </ul>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Important: If you're sponsoring @pawamoy through a GitHub organization, please send a short email to pawamoy@pm.me with the name of your organization and the GitHub account of the individual that should be added as a collaborator.<sup>4</sup></p> <p>You can cancel your sponsorship anytime.<sup>5</sup></p> <p> \u00a0 Join our 11 awesome sponsors</p> <p></p> <p> </p> <p></p> <p>   If you sponsor publicly, you're automatically added here with a link to   your profile and avatar to show your support for mkdocstrings-python.   Alternatively, if you wish to keep your sponsorship private, you'll be a   silent +1. You can select visibility during checkout and change it   afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":"<p>Current funding is at $ 159  a month.</p>"},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or   planned, but not yet implemented. When the funding goal is hit, the features are released for general availability. </p> <p></p>"},{"location":"insiders/#500-plasmavac-user-guide","title":"$ 500 \u2014 PlasmaVac User Guide","text":"<ul> <li> Cross-references for type annotations in signatures</li> <li> Symbol types in headings and table of contents</li> </ul>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use mkdocstrings-python locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with mkdocstrings-python. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to pawamoy@pm.me.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as mkdocstrings-python?</p> <p>Yes. Whether you're an individual or a company, you may use mkdocstrings-python Insiders precisely under the same terms as mkdocstrings-python, which are given by the ISC License. However, we kindly ask you to respect our fair use policy:</p> <ul> <li> <p>Please don't distribute the source code of Insiders. You may freely use   it for public, private or commercial projects, privately fork or mirror it,   but please don't make the source code public, as it would counteract the    sponsorware strategy.</p> </li> <li> <p>If you cancel your subscription, you're automatically removed as a   collaborator and will miss out on all future updates of Insiders. However, you   may use the latest version that's available to you as long as you like.   Just remember that GitHub deletes private forks.</p> </li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by mkdocstrings-python.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use mkdocstrings-python, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>It's currently not possible to grant access to each member of an organization, as GitHub only allows for adding users. Thus, after sponsoring, please send an email to pawamoy@pm.me, stating which account should become a collaborator of the Insiders repository. We're working on a solution which will make access to organizations much simpler. To ensure that access is not tied to a particular individual GitHub account, create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being added to the list of collaborators, the bot account can create a private fork of the private Insiders GitHub repository, and grant access to all members of the organizations.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#mkdocstrings-python-insiders","title":"mkdocstrings-python Insiders","text":""},{"location":"insiders/changelog/#1.1.0","title":"1.1.0 June 4, 2023","text":"<ul> <li>Add Symbol types in headings and table of contents.</li> </ul>"},{"location":"insiders/changelog/#1.0.0","title":"1.0.0 May 10, 2023","text":"<ul> <li>Add cross-references for type annotations in signatures.     Make sure to update your local templates as the signature of the     <code>format_signature</code> filter     has changed. The templates that must be updated:     <code>class.html</code>, <code>expression.html</code>, <code>function.html</code> and <code>signature.html</code>.</li> </ul>"},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>mkdocstrings-python Insiders is a compatible drop-in replacement for mkdocstrings-python, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders  repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>mkdocstrings-python Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/python.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/python.git\n</code></pre> How to get a GitHub personal access token <p>The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-pip-self-hosted","title":"with pip (self-hosted)","text":"<p>Self-hosting the Insiders package makes it possible to depend on mkdocstrings-python normally, while transparently downloading and installing the Insiders version locally. It means that you can specify your dependencies normally, and your contributors without access to Insiders will get the public version, while you get the Insiders version on your machine.</p> <p>Limitation</p> <p>With this method, there is no way to force the installation of an Insiders version rather than a public version. If there is a public version that is more recent than your self-hosted Insiders version, the public version will take precedence. Remember to regularly update your self-hosted versions by uploading latest distributions.</p> <p>You can build the distributions for Insiders yourself, by cloning the repository and using build to build the distributions, or you can download them from our GitHub Releases. You can upload these distributions to a private PyPI-like registry (Artifactory, Google Cloud, pypiserver, etc.) with Twine:</p> <pre><code># download distributions in ~/dists, then upload with:\ntwine upload --repository-url https://your-private-index.com ~/dists/*\n</code></pre> <p>You might also need to provide a username and password/token to authenticate against the registry. Please check Twine's documentation.</p> <p>You can then configure pip (or other tools) to look for packages into your package index. For example, with pip:</p> <pre><code>pip config set global.extra-index-url https://your-private-index.com/simple\n</code></pre> <p>Note that the URL might differ depending on whether your are uploading a package (with Twine) or installing a package (with pip), and depending on the registry you are using (Artifactory, Google Cloud, etc.). Please check the documentation of your registry to learn how to configure your environment.</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p> Full example with <code>pypiserver</code> <p>In this example we use pypiserver to serve a local PyPI index.</p> <pre><code>pip install --user pypiserver\n# or pipx install pypiserver\n\n# create a packages directory\nmkdir -p ~/.local/pypiserver/packages\n\n# run the pypi server without authentication\npypi-server run -p 8080 -a . -P . ~/.local/pypiserver/packages &amp;\n</code></pre> <p>We can configure the credentials to access the server in <code>~/.pypirc</code>:</p> .pypirc<pre><code>[distutils]\nindex-servers =\nlocal\n\n[local]\nrepository: http://localhost:8080\nusername:\npassword:\n</code></pre> <p>We then clone the Insiders repository, build distributions and upload them to our local server:</p> <pre><code># clone the repository\ngit clone git@github.com:pawamoy-insiders/python\ncd python\n\n# install build\npip install --user build\n# or pipx install build\n\n# checkout latest tag\ngit checkout $(git describe --tags --abbrev=0)\n\n# build the distributions\npyproject-build\n\n# upload them to our local server\ntwine upload -r local dist/* --skip-existing\n</code></pre> <p>Finally, we configure pip, and for example PDM, to use our local index to find packages:</p> <pre><code>pip config set global.extra-index-url http://localhost:8080/simple\npdm config pypi.extra.url http://localhost:8080/simple\n</code></pre> <p>Now when running <code>pip install mkdocstrings-python</code>, or resolving dependencies with PDM, both tools will look into our local index and find the Insiders version. Remember to update your local index regularly!</p>"},{"location":"insiders/installation/#with-git","title":"with git","text":"<p>Of course, you can use mkdocstrings-python Insiders directly from <code>git</code>:</p> <pre><code>git clone git@github.com:pawamoy-insiders/python\n</code></pre> <p>When cloning from <code>git</code>, the package must be installed:</p> <pre><code>pip install -e python\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of mkdocstrings-python which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/mkdocstrings_handlers/python/","title":"Index","text":""},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python","title":"python","text":"<p>This package implements a handler for the Python language.</p>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.get_handler","title":"get_handler","text":"<pre><code>get_handler(\n    theme: str,\n    custom_templates: str | None = None,\n    config_file_path: str | None = None,\n    paths: list[str] | None = None,\n    **config: Any\n) -&gt; PythonHandler\n</code></pre> <p>Simply return an instance of <code>PythonHandler</code>.</p> <p>Parameters:</p> <ul> <li> theme             (<code>str</code>)         \u2013          <p>The theme to use when rendering contents.</p> </li> <li> custom_templates             (<code>str | None</code>)         \u2013          <p>Directory containing custom templates.</p> </li> <li> config_file_path             (<code>str | None</code>)         \u2013          <p>The MkDocs configuration file path.</p> </li> <li> paths             (<code>list[str] | None</code>)         \u2013          <p>A list of paths to use as Griffe search paths.</p> </li> <li> **config             (<code>Any</code>)         \u2013          <p>Configuration passed to the handler.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PythonHandler</code>         \u2013          <p>An instance of <code>PythonHandler</code>.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/handler/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> handler","text":""},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler","title":"handler","text":"<p>This module implements a handler for the Python language.</p>"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.PythonHandler","title":"PythonHandler","text":"<pre><code>PythonHandler(\n    *args: Any,\n    config_file_path: str | None = None,\n    paths: list[str] | None = None,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>         Bases: <code>BaseHandler</code></p> <p>The Python handler class.</p> <p>Attributes:</p> <ul> <li> domain             (<code>str</code>)         \u2013          <p>The cross-documentation domain/language for this handler.</p> </li> <li> enable_inventory             (<code>bool</code>)         \u2013          <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p> </li> <li> fallback_theme         \u2013          <p>The fallback theme.</p> </li> <li> fallback_config             (<code>dict</code>)         \u2013          <p>The configuration used to collect item during autorefs fallback.</p> </li> <li> default_config             (<code>dict</code>)         \u2013          <p>The default rendering options, see <code>default_config</code>.</p> </li> </ul> <p>Parameters:</p> <ul> <li> *args             (<code>Any</code>)         \u2013          <p>Handler name, theme and custom templates.</p> </li> <li> config_file_path             (<code>str | None</code>)         \u2013          <p>The MkDocs configuration file path.</p> </li> <li> paths             (<code>list[str] | None</code>)         \u2013          <p>A list of paths to use as Griffe search paths.</p> </li> <li> **kwargs             (<code>Any</code>)         \u2013          <p>Same thing, but with keyword arguments.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.PythonHandler.default_config","title":"default_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_config: dict = {\n    \"docstring_style\": \"google\",\n    \"docstring_options\": {},\n    \"show_symbol_type_heading\": False,\n    \"show_symbol_type_toc\": False,\n    \"show_root_heading\": False,\n    \"show_root_toc_entry\": True,\n    \"show_root_full_path\": True,\n    \"show_root_members_full_path\": False,\n    \"show_object_full_path\": False,\n    \"show_category_heading\": False,\n    \"show_if_no_docstring\": False,\n    \"show_signature\": True,\n    \"show_signature_annotations\": False,\n    \"signature_crossrefs\": False,\n    \"separate_signature\": False,\n    \"line_length\": 60,\n    \"merge_init_into_class\": False,\n    \"show_docstring_attributes\": True,\n    \"show_docstring_description\": True,\n    \"show_docstring_examples\": True,\n    \"show_docstring_other_parameters\": True,\n    \"show_docstring_parameters\": True,\n    \"show_docstring_raises\": True,\n    \"show_docstring_receives\": True,\n    \"show_docstring_returns\": True,\n    \"show_docstring_warns\": True,\n    \"show_docstring_yields\": True,\n    \"show_source\": True,\n    \"show_bases\": True,\n    \"show_submodules\": False,\n    \"group_by_category\": True,\n    \"heading_level\": 2,\n    \"members_order\": rendering.Order.alphabetical.value,\n    \"docstring_section_style\": \"table\",\n    \"members\": None,\n    \"filters\": [\"!^_[^_]\"],\n    \"annotations_path\": \"brief\",\n    \"preload_modules\": None,\n    \"load_external_modules\": False,\n    \"allow_inspection\": True,\n}\n</code></pre> <p>General options:</p> <ul> <li> allow_inspection             (<code>bool</code>)         \u2013          <p>Whether to allow inspecting modules when visiting them is not possible. Default: <code>True</code>.</p> </li> <li> show_bases             (<code>bool</code>)         \u2013          <p>Show the base classes of a class. Default: <code>True</code>.</p> </li> <li> show_source             (<code>bool</code>)         \u2013          <p>Show the source code of this object. Default: <code>True</code>.</p> </li> <li> preload_modules             (<code>list[str] | None</code>)         \u2013          <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>). It is useful when you want to render documentation for a particular member of an object, and this member is imported from another package than its parent.</p> <p>For an imported member to be rendered, you need to add it to the <code>__all__</code> attribute of the importing module.</p> <p>The modules must be listed as an array of strings. Default: <code>None</code>.</p> </li> </ul> <p>Headings options:</p> <ul> <li> heading_level             (<code>int</code>)         \u2013          <p>The initial heading level to use. Default: <code>2</code>.</p> </li> <li> show_root_heading             (<code>bool</code>)         \u2013          <p>Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after <code>:::</code>). Default: <code>False</code>.</p> </li> <li> show_root_toc_entry             (<code>bool</code>)         \u2013          <p>If the root heading is not shown, at least add a ToC entry for it. Default: <code>True</code>.</p> </li> <li> show_root_full_path             (<code>bool</code>)         \u2013          <p>Show the full Python path for the root object heading. Default: <code>True</code>.</p> </li> <li> show_root_members_full_path             (<code>bool</code>)         \u2013          <p>Show the full Python path of the root members. Default: <code>False</code>.</p> </li> <li> show_object_full_path             (<code>bool</code>)         \u2013          <p>Show the full Python path of every object. Default: <code>False</code>.</p> </li> <li> show_category_heading             (<code>bool</code>)         \u2013          <p>When grouped by categories, show a heading for each category. Default: <code>False</code>.</p> </li> <li> show_symbol_type_heading             (<code>bool</code>)         \u2013          <p>Show the symbol type in headings (e.g. mod, class, func and attr). Default: <code>False</code>.</p> </li> <li> show_symbol_type_toc             (<code>bool</code>)         \u2013          <p>Show the symbol type in the Table of Contents (e.g. mod, class, func and attr). Default: <code>False</code>.</p> </li> </ul> <p>Members options:</p> <ul> <li> members             (<code>list[str] | False | None</code>)         \u2013          <p>An explicit list of members to render. Default: <code>None</code>.</p> </li> <li> members_order             (<code>str</code>)         \u2013          <p>The members ordering to use. Options: <code>alphabetical</code> - order by the members names, <code>source</code> - order members as they appear in the source file. Default: <code>\"alphabetical\"</code>.</p> </li> <li> filters             (<code>list[str] | None</code>)         \u2013          <p>A list of filters applied to filter objects based on their name. A filter starting with <code>!</code> will exclude matching objects instead of including them. The <code>members</code> option takes precedence over <code>filters</code> (filters will still be applied recursively to lower members in the hierarchy). Default: <code>[\"!^_[^_]\"]</code>.</p> </li> <li> group_by_category             (<code>bool</code>)         \u2013          <p>Group the object's children by categories: attributes, classes, functions, and modules. Default: <code>True</code>.</p> </li> <li> show_submodules             (<code>bool</code>)         \u2013          <p>When rendering a module, show its submodules recursively. Default: <code>False</code>.</p> </li> </ul> <p>Docstrings options:</p> <ul> <li> docstring_style             (<code>str</code>)         \u2013          <p>The docstring style to use: <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>. Default: <code>\"google\"</code>.</p> </li> <li> docstring_options             (<code>dict</code>)         \u2013          <p>The options for the docstring parser. See parsers under <code>griffe.docstrings</code>.</p> </li> <li> docstring_section_style             (<code>str</code>)         \u2013          <p>The style used to render docstring sections. Options: <code>table</code>, <code>list</code>, <code>spacy</code>. Default: <code>\"table\"</code>.</p> </li> <li> merge_init_into_class             (<code>bool</code>)         \u2013          <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring. Default: <code>False</code>.</p> </li> <li> show_if_no_docstring             (<code>bool</code>)         \u2013          <p>Show the object heading even if it has no docstring or children with docstrings. Default: <code>False</code>.</p> </li> <li> show_docstring_attributes             (<code>bool</code>)         \u2013          <p>Whether to display the \"Attributes\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_description             (<code>bool</code>)         \u2013          <p>Whether to display the textual block (including admonitions) in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_examples             (<code>bool</code>)         \u2013          <p>Whether to display the \"Examples\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_other_parameters             (<code>bool</code>)         \u2013          <p>Whether to display the \"Other Parameters\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_parameters             (<code>bool</code>)         \u2013          <p>Whether to display the \"Parameters\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_raises             (<code>bool</code>)         \u2013          <p>Whether to display the \"Raises\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_receives             (<code>bool</code>)         \u2013          <p>Whether to display the \"Receives\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_returns             (<code>bool</code>)         \u2013          <p>Whether to display the \"Returns\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_warns             (<code>bool</code>)         \u2013          <p>Whether to display the \"Warns\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_yields             (<code>bool</code>)         \u2013          <p>Whether to display the \"Yields\" section in the object's docstring. Default: <code>True</code>.</p> </li> </ul> <p>Signatures/annotations options:</p> <ul> <li> annotations_path             (<code>str</code>)         \u2013          <p>The verbosity for annotations path: <code>brief</code> (recommended), or <code>source</code> (as written in the source). Default: <code>\"brief\"</code>.</p> </li> <li> line_length             (<code>int</code>)         \u2013          <p>Maximum line length when formatting code/signatures. Default: <code>60</code>.</p> </li> <li> show_signature             (<code>bool</code>)         \u2013          <p>Show methods and functions signatures. Default: <code>True</code>.</p> </li> <li> show_signature_annotations             (<code>bool</code>)         \u2013          <p>Show the type annotations in methods and functions signatures. Default: <code>False</code>.</p> </li> <li> signature_crossrefs             (<code>bool</code>)         \u2013          <p>Whether to render cross-references for type annotations in signatures. Default: <code>False</code>.</p> </li> <li> separate_signature             (<code>bool</code>)         \u2013          <p>Whether to put the whole signature in a code block below the heading. If Black is installed, the signature is also formatted using it. Default: <code>False</code>.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.PythonHandler.load_inventory","title":"load_inventory  <code>classmethod</code>","text":"<pre><code>load_inventory(\n    in_file: BinaryIO,\n    url: str,\n    base_url: str | None = None,\n    domains: list[str] | None = None,\n    **kwargs: Any\n) -&gt; Iterator[tuple[str, str]]\n</code></pre> <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> <p>This implements mkdocstrings' <code>load_inventory</code> \"protocol\" (see <code>mkdocstrings.plugin</code>).</p> <p>Parameters:</p> <ul> <li> in_file             (<code>BinaryIO</code>)         \u2013          <p>The binary file-like object to read the inventory from.</p> </li> <li> url             (<code>str</code>)         \u2013          <p>The URL that this file is being streamed from (used to guess <code>base_url</code>).</p> </li> <li> base_url             (<code>str | None</code>)         \u2013          <p>The URL that this inventory's sub-paths are relative to.</p> </li> <li> domains             (<code>list[str] | None</code>)         \u2013          <p>A list of domain strings to filter the inventory by, when not passed, \"py\" will be used.</p> </li> <li> **kwargs             (<code>Any</code>)         \u2013          <p>Ignore additional arguments passed from the config.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Iterator[tuple[str, str]]</code>         \u2013          <p>Tuples of (item identifier, item URL).</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.get_handler","title":"get_handler","text":"<pre><code>get_handler(\n    theme: str,\n    custom_templates: str | None = None,\n    config_file_path: str | None = None,\n    paths: list[str] | None = None,\n    **config: Any\n) -&gt; PythonHandler\n</code></pre> <p>Simply return an instance of <code>PythonHandler</code>.</p> <p>Parameters:</p> <ul> <li> theme             (<code>str</code>)         \u2013          <p>The theme to use when rendering contents.</p> </li> <li> custom_templates             (<code>str | None</code>)         \u2013          <p>Directory containing custom templates.</p> </li> <li> config_file_path             (<code>str | None</code>)         \u2013          <p>The MkDocs configuration file path.</p> </li> <li> paths             (<code>list[str] | None</code>)         \u2013          <p>A list of paths to use as Griffe search paths.</p> </li> <li> **config             (<code>Any</code>)         \u2013          <p>Configuration passed to the handler.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PythonHandler</code>         \u2013          <p>An instance of <code>PythonHandler</code>.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/rendering/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> rendering","text":""},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering","title":"rendering","text":"<p>This module implements rendering utilities.</p>"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.Order","title":"Order","text":"<p>         Bases: <code>enum.Enum</code></p> <p>Enumeration for the possible members ordering.</p>"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_crossref","title":"do_crossref","text":"<pre><code>do_crossref(path: str, *, brief: bool = True) -&gt; Markup\n</code></pre> <p>Filter to create cross-references.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The path to link to.</p> </li> <li> brief             (<code>bool</code>)         \u2013          <p>Show only the last part of the path, add full path as hover.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markup</code>         \u2013          <p>Markup text.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_filter_objects","title":"do_filter_objects","text":"<pre><code>do_filter_objects(\n    objects_dictionary: dict[str, Object | Alias],\n    *,\n    filters: Sequence[tuple[Pattern, bool]] | None = None,\n    members_list: list[str] | None = None,\n    keep_no_docstrings: bool = True\n) -&gt; list[Object | Alias]\n</code></pre> <p>Filter a dictionary of objects based on their docstrings.</p> <p>Parameters:</p> <ul> <li> objects_dictionary             (<code>dict[str, Object | Alias]</code>)         \u2013          <p>The dictionary of objects.</p> </li> <li> filters             (<code>Sequence[tuple[Pattern, bool]] | None</code>)         \u2013          <p>Filters to apply, based on members' names. Each element is a tuple: a pattern, and a boolean indicating whether to reject the object if the pattern matches.</p> </li> <li> members_list             (<code>list[str] | None</code>)         \u2013          <p>An optional, explicit list of members to keep. When given and empty, return an empty list. When given and not empty, ignore filters and docstrings presence/absence.</p> </li> <li> keep_no_docstrings             (<code>bool</code>)         \u2013          <p>Whether to keep objects with no/empty docstrings (recursive check).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Object | Alias]</code>         \u2013          <p>A list of objects.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_format_code","title":"do_format_code","text":"<pre><code>do_format_code(code: str, line_length: int) -&gt; str\n</code></pre> <p>Format code using Black.</p> <p>Parameters:</p> <ul> <li> code             (<code>str</code>)         \u2013          <p>The code to format.</p> </li> <li> line_length             (<code>int</code>)         \u2013          <p>The line length to give to Black.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The same code, formatted.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_format_signature","title":"do_format_signature","text":"<pre><code>do_format_signature(\n    context: Context,\n    callable_path: Markup,\n    function: Function,\n    line_length: int,\n    *,\n    crossrefs: bool = False\n) -&gt; str\n</code></pre> <p>Format a signature using Black.</p> <p>Parameters:</p> <ul> <li> callable_path             (<code>Markup</code>)         \u2013          <p>The path of the callable we render the signature of.</p> </li> <li> line_length             (<code>int</code>)         \u2013          <p>The line length to give to Black.</p> </li> <li> crossrefs             (<code>bool</code>)         \u2013          <p>Whether to cross-reference types in the signature.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The same code, formatted.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_get_template","title":"do_get_template","text":"<pre><code>do_get_template(obj: Object) -&gt; str\n</code></pre> <p>Get the template name used to render an object.</p> <p>Parameters:</p> <ul> <li> obj             (<code>Object</code>)         \u2013          <p>A Griffe object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A template name.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_multi_crossref","title":"do_multi_crossref","text":"<pre><code>do_multi_crossref(\n    text: str, *, code: bool = True\n) -&gt; Markup\n</code></pre> <p>Filter to create cross-references.</p> <p>Parameters:</p> <ul> <li> text             (<code>str</code>)         \u2013          <p>The text to scan.</p> </li> <li> code             (<code>bool</code>)         \u2013          <p>Whether to wrap the result in a code tag.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markup</code>         \u2013          <p>Markup text.</p> </li> </ul>"},{"location":"reference/mkdocstrings_handlers/python/rendering/#mkdocstrings_handlers.python.rendering.do_order_members","title":"do_order_members","text":"<pre><code>do_order_members(\n    members: Sequence[Object | Alias],\n    order: Order,\n    members_list: list[str] | None,\n) -&gt; Sequence[Object | Alias]\n</code></pre> <p>Order members given an ordering method.</p> <p>Parameters:</p> <ul> <li> members             (<code>Sequence[Object | Alias]</code>)         \u2013          <p>The members to order.</p> </li> <li> order             (<code>Order</code>)         \u2013          <p>The ordering method.</p> </li> <li> members_list             (<code>list[str] | None</code>)         \u2013          <p>An optional member list (manual ordering).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Sequence[Object | Alias]</code>         \u2013          <p>The same members, ordered.</p> </li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>This is the documentation for the NEW Python handler.</p> <p>To read the documentation for the LEGACY handler, go to the legacy handler documentation.</p>"},{"location":"usage/#installation","title":"Installation","text":"<p>You can install this handler as a mkdocstrings extra:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n\"mkdocstrings[python]&gt;=0.18\",\n]\n</code></pre> <p>You can also explicitly depend on the handler:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n\"mkdocstrings-python\",\n]\n</code></pre> <p>The Python handler is the default mkdocstrings handler. You can change the default handler, or explicitely set the Python handler as default by defining the <code>default_handler</code> configuration option of <code>mkdocstrings</code> in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\ndefault_handler: python\n</code></pre>"},{"location":"usage/#injecting-documentation","title":"Injecting documentation","text":"<p>With the Python handler installed and configured as default handler, you can inject documentation for a module, class, function, or any other Python object with mkdocstrings' autodoc syntax, in your Markdown pages:</p> <pre><code>::: path.to.object\n</code></pre> <p>If another handler was defined as default handler, you can explicitely ask for the Python handler to be used when injecting documentation with the <code>handler</code> option:</p> <pre><code>::: path.to.object\n    handler: python\n</code></pre>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>When installed, the Python handler becomes the default mkdocstrings handler. You can configure it in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\n...  # the Python handler configuration\n</code></pre>"},{"location":"usage/#global-only-options","title":"Global-only options","text":"<p>Some options are global only, and go directly under the handler's name.</p>"},{"location":"usage/#import","title":"<code>import</code>","text":"<p>This option is used to import Sphinx-compatible objects inventories from other documentation sites. For example, you can import the standard library objects inventory like this:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\nimport:\n- https://docs.python-requests.org/en/master/objects.inv\n</code></pre> <p>When importing an inventory, you enable automatic cross-references to other documentation sites like the standard library docs or any third-party package docs. Typically, you want to import the inventories of your project's dependencies, at least those that are used in the public API. </p> <p>See mkdocstrings' documentation on inventories for more details.</p> <p>Additionally, the Python handler accepts a <code>domains</code> option in the import items, which allows to select the inventory domains to select. By default the Python handler only selects the <code>py</code> domain (for Python objects). You might find useful to also enable the <code>std</code> domain:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\nimport:\n- url: https://docs.python-requests.org/en/master/objects.inv\ndomains: [std, py]\n</code></pre> <p>Note</p> <p>The <code>import</code> option is common to all handlers, however they might implement it differently, or not even implement it.</p>"},{"location":"usage/#paths","title":"<code>paths</code>","text":"<p>This option is used to provide filesystem paths in which to search for Python modules. Non-absolute paths are computed as relative to MkDocs configuration file. Example:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\npaths: [src]  # search packages in the src folder\n</code></pre> <p>More details at Finding modules.</p>"},{"location":"usage/#load_external_modules","title":"<code>load_external_modules</code>","text":"<p>This option allows resolving aliases (imports) to any external module. Modules are considered external when they are not part of the package your are injecting documentation for. Enabling this option will tell the handler to resolve aliases recursively when they are made public through the <code>__all__</code> variable.</p> <p>Use with caution</p> <p> This can load a lot of modules through Griffe, slowing down your build or triggering errors that Griffe does not yet handle. We recommend using the <code>preload_modules</code> option instead, which acts as an include-list rather than as include-all.</p> <p>Example:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\nload_external_modules: true\n</code></pre>"},{"location":"usage/#globallocal-options","title":"Global/local options","text":"<p>The other options can be used both globally and locally, under the <code>options</code> key. For example, globally:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\ndo_something: true\n</code></pre> <p>...and locally, overriding the global configuration:</p> docs/some_page.md<pre><code>::: package.module.class\n    options:\n      do_something: false\n</code></pre> <p>These options affect how the documentation is collected from sources and rendered. See the following tables summarizing the options, and get more details for each option in the following pages:</p> <ul> <li>General options: various options that do not fit in the other categories</li> <li>Headings options: options related to headings and the table of contents     (or sidebar, depending on the theme used)</li> <li>Members options: options related to filtering or ordering members     in the generated documentation</li> <li>Docstrings options: options related to docstrings (parsing and rendering)</li> <li>Signature options: options related to signatures and type annotations</li> </ul>"},{"location":"usage/#options-summary","title":"Options summary","text":"<p>General options:</p> <ul> <li> allow_inspection             (<code>bool</code>)         \u2013          <p>Whether to allow inspecting modules when visiting them is not possible. Default: <code>True</code>.</p> </li> <li> show_bases             (<code>bool</code>)         \u2013          <p>Show the base classes of a class. Default: <code>True</code>.</p> </li> <li> show_source             (<code>bool</code>)         \u2013          <p>Show the source code of this object. Default: <code>True</code>.</p> </li> <li> preload_modules             (<code>list[str] | None</code>)         \u2013          <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>). It is useful when you want to render documentation for a particular member of an object, and this member is imported from another package than its parent.</p> <p>For an imported member to be rendered, you need to add it to the <code>__all__</code> attribute of the importing module.</p> <p>The modules must be listed as an array of strings. Default: <code>None</code>.</p> </li> </ul> <p>Headings options:</p> <ul> <li> heading_level             (<code>int</code>)         \u2013          <p>The initial heading level to use. Default: <code>2</code>.</p> </li> <li> show_root_heading             (<code>bool</code>)         \u2013          <p>Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after <code>:::</code>). Default: <code>False</code>.</p> </li> <li> show_root_toc_entry             (<code>bool</code>)         \u2013          <p>If the root heading is not shown, at least add a ToC entry for it. Default: <code>True</code>.</p> </li> <li> show_root_full_path             (<code>bool</code>)         \u2013          <p>Show the full Python path for the root object heading. Default: <code>True</code>.</p> </li> <li> show_root_members_full_path             (<code>bool</code>)         \u2013          <p>Show the full Python path of the root members. Default: <code>False</code>.</p> </li> <li> show_object_full_path             (<code>bool</code>)         \u2013          <p>Show the full Python path of every object. Default: <code>False</code>.</p> </li> <li> show_category_heading             (<code>bool</code>)         \u2013          <p>When grouped by categories, show a heading for each category. Default: <code>False</code>.</p> </li> <li> show_symbol_type_heading             (<code>bool</code>)         \u2013          <p>Show the symbol type in headings (e.g. mod, class, func and attr). Default: <code>False</code>.</p> </li> <li> show_symbol_type_toc             (<code>bool</code>)         \u2013          <p>Show the symbol type in the Table of Contents (e.g. mod, class, func and attr). Default: <code>False</code>.</p> </li> </ul> <p>Members options:</p> <ul> <li> members             (<code>list[str] | False | None</code>)         \u2013          <p>An explicit list of members to render. Default: <code>None</code>.</p> </li> <li> members_order             (<code>str</code>)         \u2013          <p>The members ordering to use. Options: <code>alphabetical</code> - order by the members names, <code>source</code> - order members as they appear in the source file. Default: <code>\"alphabetical\"</code>.</p> </li> <li> filters             (<code>list[str] | None</code>)         \u2013          <p>A list of filters applied to filter objects based on their name. A filter starting with <code>!</code> will exclude matching objects instead of including them. The <code>members</code> option takes precedence over <code>filters</code> (filters will still be applied recursively to lower members in the hierarchy). Default: <code>[\"!^_[^_]\"]</code>.</p> </li> <li> group_by_category             (<code>bool</code>)         \u2013          <p>Group the object's children by categories: attributes, classes, functions, and modules. Default: <code>True</code>.</p> </li> <li> show_submodules             (<code>bool</code>)         \u2013          <p>When rendering a module, show its submodules recursively. Default: <code>False</code>.</p> </li> </ul> <p>Docstrings options:</p> <ul> <li> docstring_style             (<code>str</code>)         \u2013          <p>The docstring style to use: <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>. Default: <code>\"google\"</code>.</p> </li> <li> docstring_options             (<code>dict</code>)         \u2013          <p>The options for the docstring parser. See parsers under <code>griffe.docstrings</code>.</p> </li> <li> docstring_section_style             (<code>str</code>)         \u2013          <p>The style used to render docstring sections. Options: <code>table</code>, <code>list</code>, <code>spacy</code>. Default: <code>\"table\"</code>.</p> </li> <li> merge_init_into_class             (<code>bool</code>)         \u2013          <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring. Default: <code>False</code>.</p> </li> <li> show_if_no_docstring             (<code>bool</code>)         \u2013          <p>Show the object heading even if it has no docstring or children with docstrings. Default: <code>False</code>.</p> </li> <li> show_docstring_attributes             (<code>bool</code>)         \u2013          <p>Whether to display the \"Attributes\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_description             (<code>bool</code>)         \u2013          <p>Whether to display the textual block (including admonitions) in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_examples             (<code>bool</code>)         \u2013          <p>Whether to display the \"Examples\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_other_parameters             (<code>bool</code>)         \u2013          <p>Whether to display the \"Other Parameters\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_parameters             (<code>bool</code>)         \u2013          <p>Whether to display the \"Parameters\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_raises             (<code>bool</code>)         \u2013          <p>Whether to display the \"Raises\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_receives             (<code>bool</code>)         \u2013          <p>Whether to display the \"Receives\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_returns             (<code>bool</code>)         \u2013          <p>Whether to display the \"Returns\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_warns             (<code>bool</code>)         \u2013          <p>Whether to display the \"Warns\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> show_docstring_yields             (<code>bool</code>)         \u2013          <p>Whether to display the \"Yields\" section in the object's docstring. Default: <code>True</code>.</p> </li> </ul> <p>Signatures/annotations options:</p> <ul> <li> annotations_path             (<code>str</code>)         \u2013          <p>The verbosity for annotations path: <code>brief</code> (recommended), or <code>source</code> (as written in the source). Default: <code>\"brief\"</code>.</p> </li> <li> line_length             (<code>int</code>)         \u2013          <p>Maximum line length when formatting code/signatures. Default: <code>60</code>.</p> </li> <li> show_signature             (<code>bool</code>)         \u2013          <p>Show methods and functions signatures. Default: <code>True</code>.</p> </li> <li> show_signature_annotations             (<code>bool</code>)         \u2013          <p>Show the type annotations in methods and functions signatures. Default: <code>False</code>.</p> </li> <li> signature_crossrefs             (<code>bool</code>)         \u2013          <p>Whether to render cross-references for type annotations in signatures. Default: <code>False</code>.</p> </li> <li> separate_signature             (<code>bool</code>)         \u2013          <p>Whether to put the whole signature in a code block below the heading. If Black is installed, the signature is also formatted using it. Default: <code>False</code>.</p> </li> </ul>"},{"location":"usage/#finding-modules","title":"Finding modules","text":"<p>There are multiple ways to tell the handler where to find your packages/modules.</p> <p>The recommended method is to use the <code>paths</code> option, as it's the only one that works with the <code>-f</code> option of MkDocs, allowing to build the documentation from any location on the file system. Indeed, the paths provided with the <code>paths</code> option are computed as relative to the configuration file (mkdocs.yml), so that the current working directory has no impact on the build process: you can build the docs from any location on your filesystem.</p>"},{"location":"usage/#using-the-paths-option","title":"Using the <code>paths</code> option","text":"<p>This is the recommended method.</p> <ol> <li> <p>mkdocs.yml in root, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\npaths: [.]  # actually not needed, default\n</code></pre> </li> <li> <p>mkdocs.yml in root, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\npaths: [src]\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\npaths: [..]\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\npaths: [../src]\n</code></pre> </li> </ol> <p>Except for case 1, which is supported by default, we strongly recommend setting the path to your packages using this option, even if it works without it (for example because your project manager automatically adds <code>src</code> to PYTHONPATH), to make sure anyone can build your docs from any location on their filesystem.</p>"},{"location":"usage/#using-the-pythonpath-environment-variable","title":"Using the PYTHONPATH environment variable","text":"<p>This method has limitations.</p> <p>This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend using the <code>paths</code> method instead.</p> <p>You can take advantage of the usual Python loading mechanisms. In Bash and other shells, you can run your command like this (note the prepended <code>PYTHONPATH=...</code>):</p> <ol> <li> <p>mkdocs.yml in root, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=. mkdocs build  # actually not needed, default\n</code></pre> </li> <li> <p>mkdocs.yml in root, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=src mkdocs build\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=. mkdocs build -f docs/mkdocs.yml\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=src mkdocs build -f docs/mkdocs.yml\n</code></pre> </li> </ol>"},{"location":"usage/#installing-your-package-in-the-current-python-environment","title":"Installing your package in the current Python environment","text":"<p>This method has limitations.</p> <p>This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend using the <code>paths</code> method instead.</p> <p>Install your package in the current environment, and run MkDocs:</p> pipPDMPoetry <pre><code>. venv/bin/activate\npip install -e .\nmkdocs build\n</code></pre> <pre><code>pdm install\npdm run mkdocs build\n</code></pre> <pre><code>poetry install\npoetry run mkdocs build\n</code></pre>"},{"location":"usage/customization/","title":"Customization","text":"<p>It is possible to customize the output of the generated documentation with CSS and/or by overriding templates.</p>"},{"location":"usage/customization/#css-classes","title":"CSS classes","text":"<p>The following CSS classes are used in the generated HTML:</p> <ul> <li><code>doc</code>: on all the following elements</li> <li><code>doc-children</code>: on <code>div</code>s containing the children of an object</li> <li><code>doc-object</code>: on <code>div</code>s containing an object<ul> <li><code>doc-attribute</code>: on <code>div</code>s containing an attribute</li> <li><code>doc-class</code>: on <code>div</code>s containing a class</li> <li><code>doc-function</code>: on <code>div</code>s containing a function</li> <li><code>doc-module</code>: on <code>div</code>s containing a module</li> </ul> </li> <li><code>doc-heading</code>: on objects headings<ul> <li><code>doc-object-name</code>: on <code>span</code>s wrapping objects names/paths in the heading<ul> <li><code>doc-KIND-name</code>: as above, specific to the kind of object (module, class, function, attribute)</li> </ul> </li> </ul> </li> <li><code>doc-contents</code>: on <code>div</code>s wrapping the docstring then the children (if any)<ul> <li><code>first</code>: same, but only on the root object's contents <code>div</code></li> </ul> </li> <li><code>doc-labels</code>: on <code>span</code>s wrapping the object's labels<ul> <li><code>doc-label</code>: on <code>small</code> elements containing a label<ul> <li><code>doc-label-LABEL</code>: same, where <code>LABEL</code> is replaced by the actual label</li> </ul> </li> </ul> </li> <li><code>doc-md-description</code>: on <code>div</code>s containing HTML descriptions converted from Markdown docstrings</li> <li><code>doc-symbol</code>: on <code>code</code> tags of symbol types<ul> <li><code>doc-symbol-heading</code>: on symbol types in headings</li> <li><code>doc-symbol-toc</code>: on symbol types in the ToC</li> <li><code>doc-symbol-KIND</code>: specific to the kind of object (<code>module</code>, <code>class</code>, <code>function</code>, <code>attribute</code>)</li> </ul> </li> </ul> <p>Example with colorful labels</p> CSSResult <pre><code>.doc-label { border-radius: 15px; padding: 2px 8px; font-weight: bold; }\n.doc-label-special { background-color: #3330E4; color: white; }\n.doc-label-private { background-color: #F637EC; color: white; }\n.doc-label-property { background-color: #FBB454; color: black; }\n.doc-label-read-only { background-color: #FAEA48; color: black; }\n</code></pre> <p> special private property read-only </p>"},{"location":"usage/customization/#symbol-types","title":"Symbol types","text":""},{"location":"usage/customization/#colors","title":"Colors","text":"<p>You can customize the colors of the symbol types (see <code>show_symbol_type_heading</code> and <code>show_symbol_type_toc</code>) by overriding the values of our CSS variables, for example:</p> docs/css/mkdocstrings.css<pre><code>[data-md-color-scheme=\"default\"] {\n--doc-symbol-attribute-fg-color: #0079ff;\n--doc-symbol-function-fg-color: #00dfa2;\n--doc-symbol-class-fg-color: #d1b619;\n--doc-symbol-module-fg-color: #ff0060;\n\n--doc-symbol-attribute-bg-color: #0079ff1a;\n--doc-symbol-function-bg-color: #00dfa21a;\n--doc-symbol-class-bg-color: #d1b6191a;\n--doc-symbol-module-bg-color: #ff00601a;\n}\n\n[data-md-color-scheme=\"slate\"] {\n--doc-symbol-attribute-fg-color: #963fb8;\n--doc-symbol-function-fg-color: #6d67e4;\n--doc-symbol-class-fg-color: #46c2cb;\n--doc-symbol-module-fg-color: #f2f7a1;\n\n--doc-symbol-attribute-bg-color: #963fb81a;\n--doc-symbol-function-bg-color: #6d67e41a;\n--doc-symbol-class-bg-color: #46c2cb1a;\n--doc-symbol-module-bg-color: #f2f7a11a;\n}\n</code></pre> <p>The <code>[data-md-color-scheme=\"*\"]</code> selectors work with the Material for MkDocs theme. If you are using another theme, adapt the selectors to this theme if it supports light and dark themes, otherwise just override the variables at root level:</p> docs/css/mkdocstrings.css<pre><code>:root {\n--doc-symbol-attribute-fg-color: #0079ff;\n--doc-symbol-function-fg-color: #00dfa2;\n--doc-symbol-class-fg-color: #d1b619;\n--doc-symbol-module-fg-color: #ff0060;\n\n--doc-symbol-attribute-bg-color: #0079ff1a;\n--doc-symbol-function-bg-color: #00dfa21a;\n--doc-symbol-class-bg-color: #d1b6191a;\n--doc-symbol-module-bg-color: #ff00601a;\n}\n</code></pre> <p>Preview</p> <p>     Try cycling through the themes to see the colors for each theme:     <code></code> <code></code> <code></code> <code></code> </p>"},{"location":"usage/customization/#names","title":"Names","text":"<p>You can also change the actual symbol names. For example, to use single letters instead of truncated types:</p> docs/css/mkdocstrings.css<pre><code>.doc-symbol-attribute::after {\ncontent: \"A\";\n}\n\n.doc-symbol-function::after {\ncontent: \"F\";\n}\n\n.doc-symbol-class::after {\ncontent: \"C\";\n}\n\n.doc-symbol-module::after {\ncontent: \"M\";\n}\n</code></pre> <p>Preview</p> <ul> <li>Attribute: <code></code></li> <li>Function: <code></code></li> <li>Class: <code></code></li> <li>Module: <code></code></li> </ul>"},{"location":"usage/customization/#templates","title":"Templates","text":"<p>Templates are organized into the following tree:</p> <pre><code>\ud83d\udcc1 theme/\n\u251c\u2500\u2500 \ud83d\udcc4 attribute.html\n\u251c\u2500\u2500 \ud83d\udcc4 children.html\n\u251c\u2500\u2500 \ud83d\udcc4 class.html\n\u251c\u2500\u2500 \ud83d\udcc1 docstring/\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 admonition.html\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 attributes.html\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 examples.html\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 other_parameters.html\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 parameters.html\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 raises.html\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 receives.html\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 returns.html\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 warns.html\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 yields.html\n\u251c\u2500\u2500 \ud83d\udcc4 docstring.html\n\u251c\u2500\u2500 \ud83d\udcc4 expression.html\n\u251c\u2500\u2500 \ud83d\udcc4 function.html\n\u251c\u2500\u2500 \ud83d\udcc4 labels.html\n\u251c\u2500\u2500 \ud83d\udcc4 module.html\n\u2514\u2500\u2500 \ud83d\udcc4 signature.html\n</code></pre> <p>See them in the repository. See the general mkdocstrings documentation to learn how to override them: https://mkdocstrings.github.io/theming/#templates.</p> <p>In preparation for Jinja2 blocks, which will improve customization, each one of these templates extends a base version in <code>theme/_base</code>. Example:</p> theme/docstring/admonition.html<pre><code>{% extends \"_base/docstring/admonition.html\" %}\n</code></pre> theme/_base/docstring/admonition.html<pre><code>{{ log.debug() }}\n&lt;details class=\"{{ section.value.kind }}\"&gt;\n  &lt;summary&gt;{{ section.title|convert_markdown(heading_level, html_id, strip_paragraph=True) }}&lt;/summary&gt;\n  {{ section.value.contents|convert_markdown(heading_level, html_id) }}\n&lt;/details&gt;\n</code></pre> <p>It means you will be able to customize only parts of a template without having to fully copy-paste it into your project:</p> templates/theme/docstring.html<pre><code>{% extends \"_base/docstring.html\" %}\n{% block contents %}\n{{ block.super }}\n  Additional contents\n{% endblock contents %}\n</code></pre> <p>Block-level customization is not ready yet. We welcome suggestions.</p>"},{"location":"usage/customization/#style-recommendations","title":"Style recommendations","text":""},{"location":"usage/customization/#material","title":"Material","text":"<p>Here are some CSS rules for the Material for MkDocs theme:</p> <pre><code>/* Indentation. */\ndiv.doc-contents:not(.first) {\npadding-left: 25px;\nborder-left: .05rem solid var(--md-typeset-table-color);\n}\n\n/* Mark external links as such. */\na.external::after,\na.autorefs-external::after {\n/* https://primer.style/octicons/arrow-up-right-24 */\nmask-image: url('data:image/svg+xml,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"&gt;&lt;path d=\"M18.25 15.5a.75.75 0 00.75-.75v-9a.75.75 0 00-.75-.75h-9a.75.75 0 000 1.5h7.19L6.22 16.72a.75.75 0 101.06 1.06L17.5 7.56v7.19c0 .414.336.75.75.75z\"&gt;&lt;/path&gt;&lt;/svg&gt;');\ncontent: ' ';\n\ndisplay: inline-block;\nvertical-align: middle;\nposition: relative;\n\nheight: 1em;\nwidth: 1em;\nbackground-color: var(--md-typeset-a-color);\n}\n\na.external:hover::after,\na.autorefs-external:hover::after {\nbackground-color: var(--md-accent-fg-color);\n}\n</code></pre> <p></p>"},{"location":"usage/customization/#readthedocs","title":"ReadTheDocs","text":"<p>Here are some CSS rules for the built-in ReadTheDocs theme:</p> <pre><code>/* Indentation. */\ndiv.doc-contents:not(.first) {\npadding-left: 25px;\nborder-left: .05rem solid rgba(200, 200, 200, 0.2);\n}\n</code></pre>"},{"location":"usage/extensions/","title":"Extensions","text":""},{"location":"usage/extensions/#work-in-progress","title":"Work in Progress!","text":"<p>The Python handler supports extensions through mkdocstrings' handler extensions.</p> <p>Specifically, additional templates can be added to the handler, and Griffe extensions can instruct the handler to use a particular template for a particular object by setting a value in the Griffe object's <code>extra</code> dictionary:</p> griffe_extension.py<pre><code>obj = ...  # get a reference to a Griffe object\nif \"mkdocstrings\" not in obj.extra:\n    obj.extra[\"mkdocstrings\"] = {}\nobj.extra[\"mkdocstrings\"][\"template\"] = \"template_name.html\"\n</code></pre>"},{"location":"usage/configuration/docstrings/","title":"Docstrings options","text":""},{"location":"usage/configuration/docstrings/#docstring_style","title":"<code>docstring_style</code>","text":"<ul> <li> Type <code>str</code> <code>\"google\"</code></li> </ul> <p>The docstring style to expect when parsing docstrings.</p> <p>Possible values:</p> <ul> <li><code>\"google\"</code>: see Google style.</li> <li><code>\"numpy\"</code>: see Numpy style.</li> <li><code>\"sphinx\"</code>: see Sphinx style.</li> <li><code>None</code> (<code>null</code> or <code>~</code> in YAML): no style at all, parse as regular text.</li> </ul> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\ndocstring_style: google\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      docstring_style: numpy\n</code></pre> <p>Preview</p> <p>Every style gets rendered the same way. Here are some docstring examples.</p> GoogleNumpySphinx <pre><code>def greet(name: str) -&gt; str:\n\"\"\"Greet someone.\n\n    Parameters:\n        name: The name of the person to greet.\n\n    Returns:\n        A greeting message.\n    \"\"\"\n    return f\"Hello {name}!\"\n</code></pre> <pre><code>def greet(name: str) -&gt; str:\n\"\"\"Greet someone.\n\n    Parameters\n    ----------\n    name\n        The name of the person to greet.\n\n    Returns\n    -------\n    A greeting message.\n    \"\"\"\n    return f\"Hello {name}!\"\n</code></pre> <pre><code>def greet(name: str) -&gt; str:\n\"\"\"Greet someone.\n\n    :param name: The name of the person to greet.\n    :return: A greeting message.\n    \"\"\"\n    return f\"Hello {name}!\"\n</code></pre>"},{"location":"usage/configuration/docstrings/#docstring_options","title":"<code>docstring_options</code><code>PrintOK</code><code>PrintOK</code>","text":"<ul> <li> Type <code>dict</code> <code>{}</code></li> </ul> <p>The options for the docstring parser.</p> <p>Both Google and Numpy styles offer the following options:</p> <ul> <li><code>ignore_init_summary</code> (<code>bool</code>, default <code>False</code>): whether to discard     the one-line summary of <code>__init__</code> methods.     It is useful when combined with the <code>merge_init_into_class</code> option.</li> <li><code>trim_doctest_flags</code> (<code>bool</code>, default <code>True</code>): remove the     doctest flags     written as comments in <code>pycon</code> snippets within a docstring. These flags are used     to alter the behavior of <code>doctest</code> when testing docstrings,     and should not be visible in your docs.</li> </ul> <p>The Sphinx style does not offer any option.</p> <p>See the API documentation of the available parsers in <code>griffe.docstrings</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\ndocstring_options:\nignore_init_summary: false\ntrim_doctest_flags: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      docstring_options:\n        ignore_init_summary: true\n        trim_doctest_flags: false\n</code></pre> <pre><code>class PrintOK:\n\"\"\"Class docstring.\"\"\"\n\n    def __init__(self):\n\"\"\"Initialize the instance.\n\n        Examples:\n            &gt;&gt;&gt; Class()  # doctest: +NORMALIZE_WHITESPACE\n            ok\n        \"\"\"\n        print(\"ok\")\n</code></pre> <p>Preview</p> Ignore init summary, trim doctest flagsKeep init summary and doctest flags <p>Class docstring.</p> <code>__init__</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Class()\nok\n</code></pre> <p>Class docstring.</p> <code>__init__</code> <p>Initialize the instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Class()  # doctest: +NORMALIZE_WHITESPACE\nok\n</code></pre>"},{"location":"usage/configuration/docstrings/#docstring_section_style","title":"<code>docstring_section_style</code>","text":"<ul> <li> Type <code>str</code> <code>\"table\"</code></li> </ul> <p>The style used to render docstring sections.</p> <p>A section is a block of text that has a special meaning in a docstring. There are sections for documenting attributes of an object, parameters of a function, exceptions raised by a function, the return value of a function, etc.</p> <p>Sections are parsed as structured data and can therefore be rendered in different ways. Possible values:</p> <ul> <li><code>\"table\"</code>: a simple table, usually with type, name and description columns</li> <li><code>\"list\"</code>: a simple list, akin to what you get with the ReadTheDocs Sphinx theme</li> <li><code>\"spacy\"</code>: a poor implementation of the amazing tables in Spacy's documentation</li> </ul> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\ndocstring_section_style: table\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      docstring_section_style: list\n</code></pre> <p>Preview</p> TableListSpacy <p>Tables work well when you have lots of items with short names, type annotations, descriptions, etc.. With longer strings, the columns risk getting squished horizontally. In that case, the Spacy tables can help.</p> <p>Parameters:</p> Type Name Description Default <code>int</code> <code>threshold</code> Threshold for something. required <code>bool</code> <code>flag</code> Enable something. <code>False</code> <p>Other Parameters:</p> Type Name Description Default <code>list[int | float]</code> <code>gravity_forces</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. required <code>VacuumType | Literal[\"regular\"]</code> <code>vacuum_type</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <code>VacuumType.PLASMA</code> <p>Lists work well whatever the length of names, type annotations, descriptions, etc.</p> <p>Parameters:</p> <ul> <li><code>threshold</code> (<code>int</code>) \u2014 Threshold for something.</li> <li><code>flag</code> (<code>bool</code>) \u2014 Enable something.</li> </ul> <p>Other Parameters:</p> <ul> <li><code>gravity_forces</code> (<code>list[int | float]</code>) \u2014 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</li> <li><code>vacuum_type</code> (<code>VacuumType | Literal[\"regular\"]</code>) \u2014 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</li> </ul> <p>Spacy tables work better than regular tables with longer names, type annotations, descriptions, etc., by reserving more horizontal space on the second column.</p> <p>Parameters:</p> Name Description <code>threshold</code> Threshold for something.TYPE: <code>int</code> DEFAULT: required <code>flag</code> Enable something.TYPE: <code>bool</code> DEFAULT: <code>False</code> <p>Other Parameters:</p> Name Description <code>gravity_forces</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.TYPE: <code>list[int | float]</code> DEFAULT: required <code>vacuum_type</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.TYPE:<code>VacuumType | Literal[\"regular\"]</code> DEFAULT: <code>VacuumType.PLASMA</code>"},{"location":"usage/configuration/docstrings/#merge_init_into_class","title":"<code>merge_init_into_class</code><code>Thing(value=0)</code><code>Thing</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring.</p> <p>By default, only the class name is rendered in headings. When merging, the <code>__init__</code> method parameters are added after the class name, like a signature, and the <code>__init__</code> method docstring is appended to the class' docstring. This option is well used in combination with the <code>ignore_init_summary</code> docstring option, to discard the first line of the <code>__init__</code> docstring which is not often useful.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\ndocstring_options:\nignore_init_summary: false\nmerge_init_into_class: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      docstring_options:\n        ignore_init_summary: true\n      merge_init_into_class: true\n</code></pre> <pre><code>class Thing:\n\"\"\"A class for things.\"\"\"\n\n    def __init__(self, value: int = 0):\n\"\"\"Initialize a thing.\n\n        Parameters:\n            value: The thing's value.\n        \"\"\"\n        self.value = value\n</code></pre> <p>Preview</p> Merged, summary discardedUnmerged, summary kept <p>Class docstring.</p> <p>Parameters:</p> Type Name Description Default <code>int</code> <code>value</code> The thing's value. <code>0</code> <p>Class docstring.</p> <code>__init__(value=0)</code> <p>Initialize a thing.</p> <p>Parameters:</p> Type Name Description Default <code>int</code> <code>value</code> The thing's value. <code>0</code>"},{"location":"usage/configuration/docstrings/#show_if_no_docstring","title":"<code>show_if_no_docstring</code><code>function_without_docstring</code><code>function_with_docstring</code><code>ClassWithoutDocstring</code><code>function_with_docstring</code><code>ClassWithoutDocstring</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the object heading even if it has no docstring or children with docstrings.</p> <p>Without an explicit list of <code>members</code>, members are selected based on <code>filters</code>, and then filtered again to keep only those with docstrings. Checking if a member has a docstring is done recursively: if at least one of its direct or indirect members (lower in the tree) has a docstring, the member is rendered. If the member does not have a docstring, and none of its members have a docstring, it is excluded.</p> <p>With this option you can tell the Python handler to skip the docstring check.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_if_no_docstring: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_if_no_docstring: true\n</code></pre> <pre><code>def function_without_docstring():\n    ...\n\n\ndef function_with_docstring():\n\"\"\"Hello.\"\"\"\n\n\nclass ClassWithoutDocstring:\n    def method_without_docstring(self):\n        ...\n\n    def method_with_docstring(self):\n\"\"\"Hello.\"\"\"\n</code></pre> <p>Preview</p> ShowDon't show <p>Hello.</p> <code>method_without_docstring</code> <code>method_with_docstring</code> <p>Hello.</p> <p>Hello.</p> <code>method_with_docstring</code> <p>Hello.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_attributes","title":"<code>show_docstring_attributes</code><code>Class</code><code>Class</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Attributes\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_attributes: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_if_no_docstring: false\n</code></pre> <pre><code>class Class:\n\"\"\"Summary.\n\n    Attributes:\n        attr: Some attribute.\n    \"\"\"\n\n    attr: int = 1\n</code></pre> <p>Preview</p> With attributesWithout attributes <p>Summary.</p> <p>Attributes:</p> Type Name Description <code>int</code> <code>attr</code> Some attribute. <p>Summary.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_description","title":"<code>show_docstring_description</code><code>Class</code><code>Class</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the textual blocks (including admonitions) of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_description: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_description: false\n</code></pre> <pre><code>class Class:\n\"\"\"Summary.\n\n    Long description.\n\n    Warning: Deprecated\n        Stop using this class.\n\n    Attributes:\n        attr: Some attribute.\n    \"\"\"\n\n    attr: int = 1\n</code></pre> <p>Preview</p> With description blocksWithout description blocks <p>Summary.</p> <p>Long description.</p> Deprecated<p>Stop using this class.</p> <p>Attributes:</p> Type Name Description <code>int</code> <code>attr</code> Some attribute. <p>Attributes:</p> Type Name Description <code>int</code> <code>attr</code> Some attribute."},{"location":"usage/configuration/docstrings/#show_docstring_examples","title":"<code>show_docstring_examples</code><code>print_hello</code><code>print_hello</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Examples\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_examples: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_examples: false\n</code></pre> <pre><code>def print_hello():\n\"\"\"Print hello.\n\n    Examples:\n        &gt;&gt;&gt; print(\"hello\")\n        hello\n    \"\"\"\n    print(\"hello\")\n</code></pre> <p>Preview</p> With examplesWithout examples <p>Print hello.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(\"hello\")\nhello\n</code></pre> <p>Print hello.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_other_parameters","title":"<code>show_docstring_other_parameters</code><code>do_something</code><code>do_something</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Other Parameters\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_other_parameters: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_other_parameters: false\n</code></pre> <pre><code>def do_something(**kwargs):\n\"\"\"Do something.\n\n    Other parameters:\n        whatever (int): Some integer.\n    \"\"\"\n</code></pre> <p>Preview</p> With other parametersWithout other parameters <p>Do something.</p> <p>Other parameters:</p> Type Name Description <code>int</code> <code>whatever</code> Some integer. <p>Do something.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_parameters","title":"<code>show_docstring_parameters</code><code>do_something</code><code>do_something</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Parameters\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_parameters: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_parameters: false\n</code></pre> <pre><code>def do_something(whatever: int = 0):\n\"\"\"Do something.\n\n    Parameters:\n        whatever: Some integer.\n    \"\"\"\n</code></pre> <p>Preview</p> With parametersWithout parameters <p>Do something.</p> <p>Parameters:</p> Type Name Description Default <code>int</code> <code>whatever</code> Some integer. <code>0</code> <p>Do something.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_raises","title":"<code>show_docstring_raises</code><code>raise_runtime_error</code><code>raise_runtime_error</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Raises\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_raises: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_raises: false\n</code></pre> <pre><code>def raise_runtime_error():\n\"\"\"Raise a runtime error.\n\n    Raises:\n        RuntimeError: Not good.\n    \"\"\"\n    raise RuntimeError\n</code></pre> <p>Preview</p> With exceptionsWithout exceptions <p>Raise a runtime error.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> Not good. <p>Raise a runtime error.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_receives","title":"<code>show_docstring_receives</code><code>iter_skip</code><code>iter_skip</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Receives\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_receives: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_receives: false\n</code></pre> <pre><code>def iter_skip(\n    iterable: Iterable[T],\n    initial_skip: int = 0,\n) -&gt; Generator[T, int, None]:\n\"\"\"Iterate and skip elements.\n\n    Receives:\n        skip: Number of elements to skip.\n    \"\"\"\n    skip = initial_skip\n    for element in iterable:\n        if skip or 0 &gt; 0:\n            skip -= 1\n        else:\n            skip = yield element\n</code></pre> <p>Preview</p> With received valuesWithout received values <p>Iterate and skip elements.</p> <p>Receives:</p> Type Description <code>int</code> Number of elements to skip. <p>Iterate and skip elements.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_returns","title":"<code>show_docstring_returns</code><code>rand</code><code>rand</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Returns\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_returns: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_returns: false\n</code></pre> <pre><code>def rand() -&gt; int:\n\"\"\"Return a random number.\n\n    Returns:\n        A random number.\n    \"\"\"\n    return random.randint(0, 1000)\n</code></pre> <p>Preview</p> With return valueWithout return value <p>Return a random number.</p> <p>Returns:</p> Type Description <code>int</code> A random number. <p>Return a random number.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_warns","title":"<code>show_docstring_warns</code><code>warn</code><code>warn</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Warns\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_warns: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_warns: false\n</code></pre> <pre><code>def warn():\n\"\"\"Warn user.\n\n    Warns:\n        UserWarning: When this is inappropriate.\n    \"\"\"\n    warnings.warn(UserWarning(\"This is inappropriate\"))\n</code></pre> <p>Preview</p> With warningsWithout warnings <p>Warn user.</p> <p>Warns:</p> Type Description <code>UserWarning</code> When this is inappropriate. <p>Warn user.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_yields","title":"<code>show_docstring_yields</code><code>iter_skip</code><code>iter_skip</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Yields\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_docstring_yields: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_yields: false\n</code></pre> <pre><code>def iter_skip(\n    iterable: Iterable[T],\n    initial_skip: int = 0,\n) -&gt; Generator[T, int, None]:\n\"\"\"Iterate and skip elements.\n\n    Yields:\n        Elements of the iterable.\n    \"\"\"\n    skip = initial_skip\n    for element in iterable:\n        if skip or 0 &gt; 0:\n            skip -= 1\n        else:\n            skip = yield element\n</code></pre> <p>Preview</p> With yielded valuesWithout yielded values <p>Iterate and skip elements.</p> <p>Yields:</p> Type Description <code>T</code> Elements of the iterable. <p>Iterate and skip elements.</p>"},{"location":"usage/configuration/general/","title":"General options","text":""},{"location":"usage/configuration/general/#allow_inspection","title":"<code>allow_inspection</code><code>SomeClass</code><code>SomeClass</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to allow inspecting modules (importing them) when it is not possible to visit them (parse their source code).</p> <p>When loading data for a given package, Griffe discovers every Python module, compiled or not, and inspects or visits them accordingly.</p> <p>If you have compiled modules but also provide stubs for them, you might want to disable the inspection of these modules, because inspection picks up many more members, and sometimes the collected data is inaccurate (depending on the tool that was used to compile the module) or too low-level/technical for API documentation.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nallow_inspection: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.object\n    options:\n      allow_inspection: false\n</code></pre> <p>Preview</p> With inspectionWithout inspection <p>Docstring of the class.</p> <code>__eq__</code> <p>Method docstring.</p> <code>__weakref__</code> <p>Method docstring.</p> <code>documented_method</code> <p>Method docstring.</p> <p>Docstring of the class.</p> <code>documented_method</code> <p>Method docstring.</p>"},{"location":"usage/configuration/general/#show_bases","title":"<code>show_bases</code><code>SomeClass()</code><code>SomeClass()</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show the base classes of a class.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_bases: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.object\n    options:\n      show_bases: false\n</code></pre> <p>Preview</p> With basesWithout bases <p>Bases: <code>SomeBaseClass</code></p> <p>Docstring of the class.</p> <p>Docstring of the class.</p>"},{"location":"usage/configuration/general/#show_source","title":"<code>show_source</code><code>some_function()</code><code>some_function()</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show the source code of this object.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_source: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.object\n    options:\n      show_source: false\n</code></pre> <p>Preview</p> With sourceWithout source <p>Docstring of the function.</p> Source code in <code>package/module.py</code> <pre><code>def some_function(): ...\n</code></pre> <p>Docstring of the function.</p>"},{"location":"usage/configuration/general/#preload_modules","title":"<code>preload_modules</code><code>your_module</code><code>your_module</code>","text":"<ul> <li> Type <code>list[str] | None</code> <code>None</code></li> </ul> <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>). It is useful when you want to render documentation for a particular member of an object, and this member is imported from another package than its parent.</p> <p>For an imported member to be rendered, you need to add it to the <code>__all__</code> attribute of the importing module. The package from which the imported object originates must be accessible to the handler (see Finding modules).</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\npreload_modules:\n- their_package\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: your_package.your_module\n    options:\n      preload_modules:\n      - their_package   \n</code></pre> your_package/your_module.py<pre><code>from their_package.their_module import their_object\n\n__all__ = [\"their_object\"]\n\n# rest of your code\n</code></pre> <p>Preview</p> With preloaded modulesWithout preloaded modules <p>Docstring of your module.</p> <code>their_object</code> <p>Docstring of their object.</p> <p>Docstring of your module.</p>"},{"location":"usage/configuration/headings/","title":"Headings options","text":""},{"location":"usage/configuration/headings/#heading_level","title":"<code>heading_level</code>","text":"<ul> <li> Type <code>int</code> <code>2</code></li> </ul> <p>The initial heading level to use.</p> <p>When injecting documentation for an object, the object itself and its members are rendered. For each layer of objects, we increase the heading level by 1.</p> <p>The initial heading level will be used for the first layer. If you set it to 3, then headings will start with <code>&lt;h3&gt;</code>.</p> <p>If the heading for the root object is not shown, then the initial heading level is used for its members.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nheading_level: 2\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      heading_level: 3\n</code></pre> <p>Preview</p> With level 3 and root headingWith level 3, without root heading <code>module</code> (3) <p>Docstring of the module.</p> <code>ClassA</code> (4) <p>Docstring of class A.</p> <code>ClassB</code> (4) <p>Docstring of class B.</p> <code>method_1</code> (5) <p>Docstring of the method.</p> <p>Docstring of the module.</p> <code>ClassA</code> (3) <p>Docstring of class A.</p> <code>ClassB</code> (3) <p>Docstring of class B.</p> <code>method_1</code> (4) <p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#show_root_heading","title":"<code>show_root_heading</code><code>ClassA</code> (2)<code>ClassB</code> (2)<code>method_a1</code> (2)<code>method_b1</code> (2)","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after <code>:::</code>).</p> <p>It is pretty common to inject documentation for one module per page, especially when following our automatic reference pages recipe. Since each page already has a title, usually being the module's name, we can spare one heading level by not showing the heading for the module itself (heading levels are limited to 6 by the HTML specification).</p> <p>Sparing that extra level can be helpful when your objects tree is deeply nested (e.g. method in a class in a class in a module). If your objects tree is not deeply nested, and you are injecting documentation for many different objects on a single page, it might be preferable to render the heading of each object.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_root_heading: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.ClassA\n    options:\n      show_root_heading: true\n\n::: path.to.ClassB\n    options:\n      show_root_heading: true\n</code></pre> <p>Preview</p> With root headingWithout root heading <p>Docstring of class A.</p> <code>method_a1</code> (3) <p>Docstring of the method.</p> <p>Docstring of class B.</p> <code>method_b1</code> (3) <p>Docstring of the method.</p> <p>Docstring of class A.</p> <p>Docstring of the method.</p> <p>Docstring of class B.</p> <p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#show_root_toc_entry","title":"<code>show_root_toc_entry</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>If the root heading is not shown, at least add a ToC entry for it.</p> <p>If you inject documentation for an object in the middle of a page, after long paragraphs, and without showing the root heading, then you will not be able to link to this particular object as it won't have a permalink and will be \"lost\" in the middle of text. In that case, it is useful to add a hidden anchor to the document, which will also appear in the table of contents.</p> <p>In other cases, you might want to disable the entry to avoid polluting the ToC. It is not possible to show the root heading and hide the ToC entry.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_root_toc_entry: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>## Some heading\n\nLots of text.\n\n::: path.to.object\n    options:\n      show_root_toc_entry: false\n\n## Other heading.\n\nMore text.\n</code></pre> <p>Preview</p> With ToC entryWithout ToC entry <p>Table of contents Some heading <code>object</code> Other heading </p> <p>Table of contents Some heading Other heading</p>"},{"location":"usage/configuration/headings/#show_root_full_path","title":"<code>show_root_full_path</code><code>package.module.Class.method</code><code>method</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show the full Python path for the root object heading.</p> <p>The path of a Python object is the dot-separated list of names under which it is accessible, for example <code>package.module.Class.method</code>.</p> <p>With this option you can choose to show the full path of the object you inject documentation for, or just its name. This option impacts only the object you specify, not its members. For members, see the two other options <code>show_root_members_full_path</code> and <code>show_object_full_path</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_root_full_path: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module.Class.method\n    options:\n      show_root_full_path: false\n</code></pre> <p>Preview</p> With root full pathWithout root full path <p>Docstring of the method.</p> <p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#show_root_members_full_path","title":"<code>show_root_members_full_path</code><code>package.module.Class</code><code>Class</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the full Python path of the root members.</p> <p>This option does the same thing as <code>show_root_full_path</code>, but for direct members  of the root object instead of the root object itself.</p> <p>To show the full path for every member recursively, see <code>show_object_full_path</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_root_members_full_path: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_root_members_full_path: false\n</code></pre> <p>Preview</p> With members full pathWithout members full path <p>Docstring of the module.</p> <p>Docstring of the class.</p> <code>method</code> <p>Docstring of the method.</p> <p>Docstring of the module.</p> <p>Docstring of the class.</p> <code>method</code> <p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#show_object_full_path","title":"<code>show_object_full_path</code><code>package.module.Class</code><code>Class</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the full Python path of every object.</p> <p>Same as for <code>show_root_members_full_path</code>, but for every member, recursively. This option takes precedence over  <code>show_root_members_full_path</code>:</p> <code>show_root_members_full_path</code> <code>show_object_full_path</code> Direct root members path False False Name only False True Full True False Full True True Full in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_object_full_path: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_object_full_path: false\n</code></pre> <p>Preview</p> With objects full pathWithout objects full path <p>Docstring of the module.</p> <p>Docstring of the class.</p> <code>package.module.Class.method</code> <p>Docstring of the method.</p> <p>Docstring of the module.</p> <p>Docstring of the class.</p> <code>method</code> <p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#show_category_heading","title":"<code>show_category_heading</code>Attributes (2)Classes (2)<code>module_attribute</code> (2)<code>Class</code> (2)","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>When grouped by categories, show a heading for each category. These category headings will appear in the table of contents, allowing you to link to them using their permalinks.</p> <p>Not recommended with deeply nested object</p> <p>When injecting documentation for deeply nested objects, you'll quickly run out of heading levels, and the objects at the bottom of the tree risk all getting documented using H6 headings, which might decrease the readability of your API docs.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\ngroup_by_category: true\nshow_category_heading: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      group_by_category: true\n      show_category_heading: false\n</code></pre> <p>Preview</p> With category headingsWithout category headings <p>Docstring of the module.</p> <code>module_attribute</code> (3) <p>Docstring of the module attribute.</p> <code>Class</code> (3) <p>Docstring of the class.</p> Attributes (4) <code>class_attribute</code> (5) <p>Docstring of the class attribute.</p> Methods (4) <code>method</code> (5) <p>Docstring of the method.</p> <p>Docstring of the module.</p> <p>Docstring of the module attribute.</p> <p>Docstring of the class.</p> <code>class_attribute</code> (3) <p>Docstring of the class attribute.</p> <code>method</code> (3) <p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#show_symbol_type_heading","title":"<code>show_symbol_type_heading</code><code></code> <code>attribute</code><code></code> <code>Class</code><code></code> <code>function</code><code>attribute</code><code>Class</code><code>function</code>","text":"<p> Sponsors only \u2014  Insiders 1.1.0</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in headings.</p> <p>This option will prefix headings with <code></code>, <code></code>, <code></code> or <code></code> types. See also <code>show_symbol_type_toc</code>.</p> <p>To customize symbols, see Customizing symbol types.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_symbol_type_heading: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_symbol_type_heading: false\n</code></pre> <p>Preview</p> With symbol type in headingsWithout symbol type in headings <code></code> <code>module</code> <p>Docstring of the module.</p> <p>Docstring of the module attribute.</p> <p>Docstring of the class.</p> <p>Docstring of the function.</p> <code>module</code> <p>Docstring of the module.</p> <p>Docstring of the module attribute.</p> <p>Docstring of the class.</p> <p>Docstring of the function.</p>"},{"location":"usage/configuration/headings/#show_symbol_type_toc","title":"<code>show_symbol_type_toc</code>","text":"<p> Sponsors only \u2014  Insiders 1.1.0</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in the Table of Contents.</p> <p>This option will prefix items in the ToC with <code></code>, <code></code>, <code></code> or <code></code> types. See also <code>show_symbol_type_heading</code>.</p> <p>To customize symbols, see Customizing symbol types.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_symbol_type_toc: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_symbol_type_toc: false\n</code></pre> <p>Preview</p> With symbol type in ToCWithout symbol type in ToC <ul> <li><code></code> attribute</li> <li><code></code> Class</li> <li><code></code> function</li> </ul> <ul> <li>attribute</li> <li>Class</li> <li>function</li> </ul>"},{"location":"usage/configuration/members/","title":"Members options","text":""},{"location":"usage/configuration/members/#members","title":"<code>members</code><code>this_function</code><code>ThisClass</code><code>this_attribute</code><code>ThisClass</code>","text":"<ul> <li> Type <code>list[str] |     bool | None</code> <code>None</code></li> </ul> <p>An explicit list of members to render.</p> <p>Only members declared in this list will be rendered. A member without a docstring will still be rendered, even if <code>show_if_no_docstring</code> is set to false.</p> <p>The members will be rendered in the specified order, regardless of the value of <code>members_order</code>.</p> <p>Passing a falsy value (<code>no</code>, <code>false</code> in YAML) or an empty list (<code>[]</code>) will tell the Python handler not to render any member. Passing a truthy value (<code>yes</code>, <code>true</code> in YAML) will tell the Python handler to render every member.</p> <p>Any given value, except for an explicit <code>None</code> (<code>null</code> in YAML) will tell the handler to ignore <code>filters</code> for the object's members. Filters will still be applied to the next layers of members (grand-children).</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nmembers:\n- hello  # (1)\n</code></pre> <ol> <li> Most of the time it won't make sense to use this option at the global level.</li> </ol> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      members:\n      - ThisClass\n      - this_function\n</code></pre> package/module.py<pre><code>\"\"\"Module docstring.\"\"\"\n\ndef this_function():\n\"\"\"Function docstring.\"\"\"\n\nclass ThisClass:\n\"\"\"Class docstring.\"\"\"\n    def method(self):\n\"\"\"Method docstring.\"\"\"\n\nthis_attribute = 0\n\"\"\"Attribute docstring.\"\"\"\n</code></pre> <p>Preview</p> With <code>members: true</code>With <code>members: false</code> or <code>members: []</code>With <code>members: [ThisClass]</code> <p>Module docstring.</p> <p>Function docstring.</p> <p>Class docstring.</p> <code>method</code> <p>Method docstring.</p> <p>Attribute docstring.</p> <p>Module docstring.</p> <p>Module docstring.</p> <p>Class docstring.</p> <code>method</code> <p>Method docstring.</p> <p>The default behavior (with unspecified <code>members</code> or <code>members: null</code>) is to use <code>filters</code>.</p>"},{"location":"usage/configuration/members/#members_order","title":"<code>members_order</code><code>function_a</code><code>function_b</code><code>function_c</code><code>function_b</code><code>function_a</code><code>function_c</code>","text":"<ul> <li> Type <code>str</code> <code>\"alphabetical\"</code></li> </ul> <p>The members ordering to use. Possible values:</p> <ul> <li><code>alphabetical</code>: order by the members names.</li> <li><code>source</code>: order members as they appear in the source file.</li> </ul> <p>The order applies for all members, recursively. The order will be ignored for members that are explicitely sorted using the <code>members</code> option.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nmembers_order: alphabetical\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      members_order: source\n</code></pre> package/module.py<pre><code>\"\"\"Module docstring.\"\"\"\n\ndef function_b():\n\"\"\"Function a.\"\"\"\n\ndef function_a():\n\"\"\"Function b.\"\"\"\n\ndef function_c():\n\"\"\"Function c.\"\"\"\n</code></pre> <p>Preview</p> With alphabetical orderWith source order <p>Module docstring.</p> <p>Function a.</p> <p>Function b.</p> <p>Function c.</p> <p>Module docstring.</p> <p>Function b.</p> <p>Function a.</p> <p>Function c.</p>"},{"location":"usage/configuration/members/#filters","title":"<code>filters</code><code>hello</code><code>_world</code><code>hello</code><code>_world</code>","text":"<ul> <li> Type <code>list[str] | None</code> <code>[\"!^_[^_]\"]</code></li> </ul> <p>A list of filters applied to filter objects based on their name.</p> <p>Filters are regular expressions. These regular expressions are evaluated by Python and so must match the syntax supported by the <code>re</code> module. A filter starting with <code>!</code> (negative filter) will exclude matching objects instead of including them.</p> <p>The default value (<code>[\"!^_[^_]\"]</code>) means: render every object, except those starting with one underscore, unless they start with two underscores. It means that an object whose name is <code>hello</code>, <code>__hello</code>, or <code>__hello__</code> will be rendered, but not one whose name is <code>_hello</code>.</p> <p>Each filter takes precedence over the previous one. This allows for fine-grain selection of objects by adding more specific filters. For example, you can start by unselecting objects that start with <code>_</code>, and add a second filter that re-select objects that start with <code>__</code>. The default filters can therefore be rewritten like this:</p> <pre><code>filters:\n- \"!^_\"\n- \"^__\"\n</code></pre> <p>If there are no negative filters, the handler considers that everything is unselected first, and then selects things based on your positive filters. If there is at least one negative filter, the handler considers that everything is selected first, and then re-selects/unselects things based on your other filters. In short, <code>filters: [\"a\"]</code> means \"keep nothing except names containing <code>a</code>\", while <code>filters: [\"!a\"]</code> means \"keep everything except names containing <code>a</code>\".</p> <p>An empty list of filters tells the Python handler to render every object. The <code>members</code> option takes precedence over filters (filters will still be applied recursively to lower members in the hierarchy).</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nfilters:\n- \"!^_\"\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      filters: []\n</code></pre> package/module.py<pre><code>def hello(): ...\ndef _world(): ...\n</code></pre> <p>Preview</p> With <code>filters: []</code>With <code>filters: [\"hello\"]</code>With <code>filters: [\"!hello\"]</code> <p>Module docstring.</p> <p>Function docstring.</p> <p>Function docstring.</p> <p>Module docstring.</p> <p>Function docstring.</p> <p>Module docstring.</p> <p>Function docstring.</p> <p>Common filters</p> <p>Here are some common filters that you might to want to use.</p> <ul> <li><code>[\"!^_\"]</code>: exclude all private/protected/special objects</li> <li><code>[\"!^_\", \"^__init__$\"]</code>: same as above, but keep <code>__init__</code> methods</li> <li><code>[\"!^_[^_]\"]</code>: exclude all private/protected objects, keep special ones (default filters)</li> </ul>"},{"location":"usage/configuration/members/#group_by_category","title":"<code>group_by_category</code><code>attribute_c</code><code>ClassB</code><code>function_a</code><code>function_d</code><code>function_a</code><code>ClassB</code><code>attribute_c</code><code>function_d</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Group the object members by categories: attributes, classes, functions, and modules.</p> <p>Members within a same category will be ordered according to the <code>members_order</code> option. You can use the <code>show_category_heading</code> option to also render a heading for each category.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\ngroup_by_category: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      group_by_category: false\n</code></pre> package/module.py<pre><code>def function_a(): ...\nclass ClassB: ...\nattribute_C = 0\ndef function_d(): ...\n</code></pre> <p>Preview</p> With category groupingWithout category grouping <p>Module docstring.</p> <p>Attribute docstring.</p> <p>Class docstring.</p> <p>Function docstring.</p> <p>Function docstring.</p> <p>Module docstring.</p> <p>Function docstring.</p> <p>Class docstring.</p> <p>Attribute docstring.</p> <p>Function docstring.</p>"},{"location":"usage/configuration/members/#show_submodules","title":"<code>show_submodules</code><code>subpackage_member</code><code>submodule</code><code>subpackage_member</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>When rendering a module, show its submodules recursively.</p> <p>This is false by default, because most of the time we render only one module per page, and when rendering a package (a tree of modules and their members) on a single page, we quickly run out of heading levels.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_submodules: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.subpackage\n    options:\n      show_submodules: false\n</code></pre> package<pre><code>\ud83d\udcc1 package\n\u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n\u2514\u2500\u2500 \ud83d\udcc1 subpackage\n    \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n    \u2514\u2500\u2500 \ud83d\udcc4 submodule.py\n</code></pre> <p>Preview</p> With submodulesWithout submodules <p>Subpackage docstring.</p> <p>Member docstring.</p> <p>Submodule docstring.</p> <code>submodule_member</code> <p>Member docstring.</p> <p>Subpackage docstring.</p> <p>Member docstring.</p>"},{"location":"usage/configuration/signatures/","title":"Signatures options","text":""},{"location":"usage/configuration/signatures/#annotations_path","title":"<code>annotations_path</code><code>convert(text, md)</code><code>convert(text, md)</code>","text":"<ul> <li> Type <code>str</code> <code>\"brief\"</code></li> </ul> <p>The verbosity for annotations path.</p> <p>Possible values:</p> <ul> <li><code>brief</code> (recommended): render only the last component of each type path, not their full paths.     For example, it will render <code>Sequence[Path]</code> and not <code>typing.Sequence[pathlib.Path]</code>.     Brief annotations will cross-reference the right object anyway,     and show the full path in a tooltip when hovering them.</li> <li><code>source</code>: render annotations as written in the source. For example if you imported <code>typing</code> as <code>t</code>,     it will render <code>typing.Sequence</code> as <code>t.Sequence</code>. Each part will cross-reference the relevant object:     <code>t</code> will link to the <code>typing</code> module and <code>Sequence</code> will link to the <code>Sequence</code> type.</li> </ul> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nannotations_path: brief\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      annotations_path: source\n</code></pre> <pre><code>import markdown\nimport markupsafe\n\n\ndef convert(text: str, md: markdown.Markdown) -&gt; markupsafe.Markup:\n\"\"\"Convert text to Markdown.\n\n    Parameters:\n        text: The text to convert.\n        md: A Markdown instance.\n\n    Returns:\n        Converted markup.\n    \"\"\"\n    return Markup(md.convert(text))\n</code></pre> <p>Preview</p> Brief annotationsSource annotations <p>Convert text to Markdown.</p> <p>Parameters:</p> Type Description Default <code>str</code> The text to convert. required <code>Markdown</code> A Markdown instance. required <p>Returns:</p> Type Name Description <code>Markup</code> <code>text</code> Converted markup. <p>Convert text to Markdown.</p> <p>Parameters:</p> Type Description Default <code>str</code> The text to convert. required <code>markdown.Markdown</code> A Markdown instance. required <p>Returns:</p> Type Name Description <code>markupsafe.Markup</code> <code>text</code> Converted markup."},{"location":"usage/configuration/signatures/#line_length","title":"<code>line_length</code>long_function_namelong_function_name","text":"<ul> <li> Type <code>int</code> <code>60</code></li> </ul> <p>Maximum line length when formatting code/signatures.</p> <p>When separating signatures from headings with the <code>separate_signature</code> option, the Python handler will try to format the signatures using Black and the specified line length.</p> <p>If Black is not installed, the handler issues an INFO log once.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nseparate_signature: true\nline_length: 60\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n      line_length: 80\n</code></pre> <p>Preview</p> Line length 60Line length 80 <pre><code>long_function_name(\n    long_parameter_1=\"hello\",\n    long_parameter_2=\"world\",\n)</code></pre> <pre><code>long_function_name(long_parameter_1=\"hello\", long_parameter_2=\"world\")</code></pre>"},{"location":"usage/configuration/signatures/#show_signature","title":"<code>show_signature</code><code>function(param1, param2=None)</code><code>function</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show methods and functions signatures.</p> <p>Without it, just the function/method name is rendered.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nshow_signature: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_signature: false\n</code></pre> <p>Preview</p> With signatureWithout signature <p>Function docstring.</p> <p>Function docstring.</p>"},{"location":"usage/configuration/signatures/#show_signature_annotations","title":"<code>show_signature_annotations</code>functionfunction","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the type annotations in methods and functions signatures.</p> <p>Since the heading can become quite long when annotations are rendered, it is usually best to separate the signature from the heading.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nseparate_signature: true\nshow_signature_annotations: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n      show_signature_annotations: false\n</code></pre> <p>Preview</p> With signature annotationsWithout signature annotations <pre><code>function(\n    param1: list[int | float],\n    param2: bool | None = None,\n) -&gt; float\n</code></pre> <p>Function docstring.</p> <pre><code>function(param1, param2=None)\n</code></pre> <p>Function docstring.</p>"},{"location":"usage/configuration/signatures/#separate_signature","title":"<code>separate_signature</code>function<code>function(param1, param2=None)</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to put the whole signature in a code block below the heading.</p> <p>When separating signatures from headings, the Python handler will try to format the signatures using Black and the specified line length.</p> <p>If Black is not installed, the handler issues an INFO log once.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nseparate_signature: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n</code></pre> <p>Preview</p> With separate signatureWithout separate signature <pre><code>function(param1, param2=None)\n</code></pre> <p>Function docstring.</p> <p>Function docstring.</p>"},{"location":"usage/configuration/signatures/#signature_crossrefs","title":"<code>signature_crossrefs</code>do_format_codedo_format_code","text":"<p> Sponsors only \u2014  Insiders 1.0.0</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to render cross-references for type annotations in signatures</p> <p>When signatures are separated from headings with the <code>separate_signature</code> option and type annotations are shown with the <code>show_signature_annotations</code> option, this option will render a cross-reference (link) for each type annotation in the signature.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nseparate_signature: true\nshow_signature_annotations: true\nsignature_crossrefs: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n      show_signature_annotations: true\n      signature_crossrefs: true\n</code></pre> <p>Preview</p> With signature cross-referencesWithout signature cross-references <pre><code>do_format_code(code: str, line_length: int) -&gt; str\n</code></pre> <p>Function docstring.</p> <pre><code>do_format_code(code: str, line_length: int) -&gt; str\n</code></pre> <p>Function docstring.</p>"},{"location":"usage/docstrings/google/","title":"Google style","text":""},{"location":"usage/docstrings/google/#work-in-progress","title":"Work in Progress!","text":""},{"location":"usage/docstrings/google/#google-style-admonitions","title":"Google-style admonitions","text":"<p>With Google-style docstrings, any section that is not recognized will be transformed into its admonition equivalent. For example:</p> DocstringResult <pre><code>\"\"\"\nNote:\n    It looks like a section, but it will be rendered as an admonition.\n\nTip: You can even choose a title.\n    This admonition has a custom title!\n\"\"\"\n</code></pre> <p>Note</p> <p>It looks like a section, but it will be rendered as an admonition.</p> <p>You can even choose a title.</p> <p>This admonition has a custom title!</p> <p>See Napoleon's documentation. See the supported docstring sections on Griffe's documentation.</p>"},{"location":"usage/docstrings/numpy/","title":"Numpydoc style","text":""},{"location":"usage/docstrings/numpy/#work-in-progress","title":"Work in Progress!","text":"<p>Note</p> <p>As Numpy-style is partially supported by the underlying parser, you may experience problems in the building process if your docstring has a <code>Methods</code> section in the class docstring (see #366).</p> <p>See Numpydoc's documentation. See the supported docstring sections on Griffe's documentation.</p>"},{"location":"usage/docstrings/sphinx/","title":"Sphinx style","text":""},{"location":"usage/docstrings/sphinx/#work-in-progress","title":"Work in Progress!","text":"<p>See Sphinx's documentation. See the supported docstring sections on Griffe's documentation.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}