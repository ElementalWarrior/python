{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocstrings-python \u00a4 A Python handler for mkdocstrings . Requirements \u00a4 mkdocstrings-python requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12 Installation \u00a4 You can install this handler as a mkdocstrings extra: # PEP 621 dependencies declaration # adapt to your dependencies manager [project] dependencies = [ \"mkdocstrings[python]>=0.18\" , ] You can also explicitely depend on the handler: # PEP 621 dependencies declaration # adapt to your dependencies manager [project] dependencies = [ \"mkdocstrings-python\" , ] Features \u00a4 Data collection from source code : collection of the object-tree and the docstrings is done thanks to Griffe . Support for type annotations: Griffe collects your type annotations and mkdocstrings uses them to display parameters types or return types. It is even able to automatically add cross-references to other objects from your API, from the standard library or from third-party libraries! See how to load inventories to enable it. Recursive documentation of Python objects: just use the module dotted-path as identifier, and you get the full module docs. You don't need to inject documentation for each class, function, etc. Support for documented attributes: attributes (variables) followed by a docstring (triple-quoted string) will be recognized by Griffe in modules, classes and even in __init__ methods. Multiple docstring-styles support: common support for Google-style, Numpydoc-style, and Sphinx-style docstrings. See Griffe's documentation on docstrings support. Admonition support in Google docstrings: blocks like Note: or Warning: will be transformed to their admonition equivalent. We do not support nested admonitions in docstrings! Every object has a TOC entry: we render a heading for each object, meaning MkDocs picks them into the Table of Contents, which is nicely display by the Material theme. Thanks to mkdocstrings cross-reference ability, you can reference other objects within your docstrings, with the classic Markdown syntax: [this object][package.module.object] or directly with [package.module.object][] Source code display: mkdocstrings can add a collapsible div containing the highlighted source code of the Python object.","title":"Overview"},{"location":"#mkdocstrings-python","text":"A Python handler for mkdocstrings .","title":"mkdocstrings-python"},{"location":"#requirements","text":"mkdocstrings-python requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12","title":"Requirements"},{"location":"#installation","text":"You can install this handler as a mkdocstrings extra: # PEP 621 dependencies declaration # adapt to your dependencies manager [project] dependencies = [ \"mkdocstrings[python]>=0.18\" , ] You can also explicitely depend on the handler: # PEP 621 dependencies declaration # adapt to your dependencies manager [project] dependencies = [ \"mkdocstrings-python\" , ]","title":"Installation"},{"location":"#features","text":"Data collection from source code : collection of the object-tree and the docstrings is done thanks to Griffe . Support for type annotations: Griffe collects your type annotations and mkdocstrings uses them to display parameters types or return types. It is even able to automatically add cross-references to other objects from your API, from the standard library or from third-party libraries! See how to load inventories to enable it. Recursive documentation of Python objects: just use the module dotted-path as identifier, and you get the full module docs. You don't need to inject documentation for each class, function, etc. Support for documented attributes: attributes (variables) followed by a docstring (triple-quoted string) will be recognized by Griffe in modules, classes and even in __init__ methods. Multiple docstring-styles support: common support for Google-style, Numpydoc-style, and Sphinx-style docstrings. See Griffe's documentation on docstrings support. Admonition support in Google docstrings: blocks like Note: or Warning: will be transformed to their admonition equivalent. We do not support nested admonitions in docstrings! Every object has a TOC entry: we render a heading for each object, meaning MkDocs picks them into the Table of Contents, which is nicely display by the Material theme. Thanks to mkdocstrings cross-reference ability, you can reference other objects within your docstrings, with the classic Markdown syntax: [this object][package.module.object] or directly with [package.module.object][] Source code display: mkdocstrings can add a collapsible div containing the highlighted source code of the Python object.","title":"Features"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.6.0 - 2022-02-13 \u00a4 Compare with 0.5.4 Features \u00a4 Add option to merge __init__ methods' docstrings into their classes' docstrings ( 1b4d1c0 by Timoth\u00e9e Mazzucotelli). Support separate attribute signature ( e962b88 by Timoth\u00e9e Mazzucotelli). Bug Fixes \u00a4 Restore full cross-refs paths on hover ( ac11970 by Timoth\u00e9e Mazzucotelli). Fix rendering of labels ( 52919c5 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Don't add trailing parentheses in functions heading when separate signature ( 885696e by Timoth\u00e9e Mazzucotelli). Use more explicit template debug messages ( f2122d7 by Timoth\u00e9e Mazzucotelli). 0.5.4 - 2022-02-13 \u00a4 Compare with 0.5.3 Bug Fixes \u00a4 Don't load additional modules during fallback ( 69b8e25 by Timoth\u00e9e Mazzucotelli). 0.5.3 - 2022-02-08 \u00a4 Compare with 0.5.2 Bug Fixes \u00a4 Allow passing null as docstring style ( f526816 by Timoth\u00e9e Mazzucotelli). Issue #2 0.5.2 - 2022-02-05 \u00a4 Compare with 0.5.1 Dependencies \u00a4 Require at least mkdocstrings 0.18 ( 7abdda4 by Timoth\u00e9e Mazzucotelli). 0.5.1 - 2022-02-03 \u00a4 Compare with 0.5.0 Dependencies \u00a4 Depend on Griffe >= 0.11.1 ( 1303557 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Move handler into its own module ( b787e78 by Timoth\u00e9e Mazzucotelli). 0.5.0 - 2022-02-03 \u00a4 Compare with 0.4.1 Features \u00a4 Allow changing docstring style of an object ( 39240c1 by Timoth\u00e9e Mazzucotelli). Bug Fixes \u00a4 Warn if Black is not installed when formatting signature ( b848277 by Timoth\u00e9e Mazzucotelli). Fix missing default for docstring_section_style option ( 774988e by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Change to new way of stripping paragraphs ( 33d4594 by Timoth\u00e9e Mazzucotelli). 0.4.1 - 2022-02-01 \u00a4 Compare with 0.4.0 Bug Fixes \u00a4 Fix docstring admonitions rendering ( a24ae2e by Timoth\u00e9e Mazzucotelli). 0.4.0 - 2022-02-01 \u00a4 Compare with 0.3.0 Code Refactoring \u00a4 Use the new mkdocstrings_handlers namespace ( 23c9023 by Timoth\u00e9e Mazzucotelli). 0.3.0 - 2022-01-14 \u00a4 Compare with 0.2.0 Features \u00a4 Support griffe 0.10 ( 28061de by Timoth\u00e9e Mazzucotelli). Dependencies \u00a4 Require griffe 0.10 ( cfbd7bb by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Use new logger patching utility ( 4cdb292 by Timoth\u00e9e Mazzucotelli). 0.2.0 - 2021-12-28 \u00a4 Compare with 0.1.0 Dependencies \u00a4 Depend on griffe >= 0.7.1 ( 34f7ebd by Timoth\u00e9e Mazzucotelli). Upgrade griffe, no upper bound ( 8f0aa42 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Add show_signature rendering option ( 0f07c2e by Will Da Silva). Bug Fixes \u00a4 Fix templates for named docstring elements ( 47868a1 by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2021-12-19 \u00a4 Compare with first commit Features \u00a4 Implement handler and add templates ( dbb580a by Timoth\u00e9e Mazzucotelli). Bug Fixes \u00a4 Fix separate signature feature ( da6e81c by Timoth\u00e9e Mazzucotelli). Fix signature template (parameters annotations) ( b34ead0 by Timoth\u00e9e Mazzucotelli). Only show source when present ( c270d68 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Return all known anchors ( 9bbfe14 by Timoth\u00e9e Mazzucotelli). Update for griffe 0.4.0 ( 831aabb by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#060-2022-02-13","text":"Compare with 0.5.4","title":"0.6.0 - 2022-02-13"},{"location":"changelog/#features","text":"Add option to merge __init__ methods' docstrings into their classes' docstrings ( 1b4d1c0 by Timoth\u00e9e Mazzucotelli). Support separate attribute signature ( e962b88 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#bug-fixes","text":"Restore full cross-refs paths on hover ( ac11970 by Timoth\u00e9e Mazzucotelli). Fix rendering of labels ( 52919c5 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring","text":"Don't add trailing parentheses in functions heading when separate signature ( 885696e by Timoth\u00e9e Mazzucotelli). Use more explicit template debug messages ( f2122d7 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#054-2022-02-13","text":"Compare with 0.5.3","title":"0.5.4 - 2022-02-13"},{"location":"changelog/#bug-fixes_1","text":"Don't load additional modules during fallback ( 69b8e25 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#053-2022-02-08","text":"Compare with 0.5.2","title":"0.5.3 - 2022-02-08"},{"location":"changelog/#bug-fixes_2","text":"Allow passing null as docstring style ( f526816 by Timoth\u00e9e Mazzucotelli). Issue #2","title":"Bug Fixes"},{"location":"changelog/#052-2022-02-05","text":"Compare with 0.5.1","title":"0.5.2 - 2022-02-05"},{"location":"changelog/#dependencies","text":"Require at least mkdocstrings 0.18 ( 7abdda4 by Timoth\u00e9e Mazzucotelli).","title":"Dependencies"},{"location":"changelog/#051-2022-02-03","text":"Compare with 0.5.0","title":"0.5.1 - 2022-02-03"},{"location":"changelog/#dependencies_1","text":"Depend on Griffe >= 0.11.1 ( 1303557 by Timoth\u00e9e Mazzucotelli).","title":"Dependencies"},{"location":"changelog/#code-refactoring_1","text":"Move handler into its own module ( b787e78 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#050-2022-02-03","text":"Compare with 0.4.1","title":"0.5.0 - 2022-02-03"},{"location":"changelog/#features_1","text":"Allow changing docstring style of an object ( 39240c1 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#bug-fixes_3","text":"Warn if Black is not installed when formatting signature ( b848277 by Timoth\u00e9e Mazzucotelli). Fix missing default for docstring_section_style option ( 774988e by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_2","text":"Change to new way of stripping paragraphs ( 33d4594 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#041-2022-02-01","text":"Compare with 0.4.0","title":"0.4.1 - 2022-02-01"},{"location":"changelog/#bug-fixes_4","text":"Fix docstring admonitions rendering ( a24ae2e by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#040-2022-02-01","text":"Compare with 0.3.0","title":"0.4.0 - 2022-02-01"},{"location":"changelog/#code-refactoring_3","text":"Use the new mkdocstrings_handlers namespace ( 23c9023 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#030-2022-01-14","text":"Compare with 0.2.0","title":"0.3.0 - 2022-01-14"},{"location":"changelog/#features_2","text":"Support griffe 0.10 ( 28061de by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#dependencies_2","text":"Require griffe 0.10 ( cfbd7bb by Timoth\u00e9e Mazzucotelli).","title":"Dependencies"},{"location":"changelog/#code-refactoring_4","text":"Use new logger patching utility ( 4cdb292 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#020-2021-12-28","text":"Compare with 0.1.0","title":"0.2.0 - 2021-12-28"},{"location":"changelog/#dependencies_3","text":"Depend on griffe >= 0.7.1 ( 34f7ebd by Timoth\u00e9e Mazzucotelli). Upgrade griffe, no upper bound ( 8f0aa42 by Timoth\u00e9e Mazzucotelli).","title":"Dependencies"},{"location":"changelog/#features_3","text":"Add show_signature rendering option ( 0f07c2e by Will Da Silva).","title":"Features"},{"location":"changelog/#bug-fixes_5","text":"Fix templates for named docstring elements ( 47868a1 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#010-2021-12-19","text":"Compare with first commit","title":"0.1.0 - 2021-12-19"},{"location":"changelog/#features_4","text":"Implement handler and add templates ( dbb580a by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#bug-fixes_6","text":"Fix separate signature feature ( da6e81c by Timoth\u00e9e Mazzucotelli). Fix signature template (parameters annotations) ( b34ead0 by Timoth\u00e9e Mazzucotelli). Only show source when present ( c270d68 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_5","text":"Return all known anchors ( 9bbfe14 by Timoth\u00e9e Mazzucotelli). Update for griffe 0.4.0 ( 831aabb by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd python make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run mkdocstrings-python [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd python make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run mkdocstrings-python [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build mkdocstrings-python . Thank you! python | pdm | copier-pdm Direct dependencies \u00a4 autoflake | black | darglint | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | git-changelog | griffe | isort | mkdocs | mkdocs-coverage | mkdocs-gen-files | mkdocs-literate-nav | mkdocs-material | mkdocs-section-index | mkdocstrings | mypy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | safety | toml | types-markdown | types-toml | wps-light Indirect dependencies \u00a4 ansimarkup | astor | astunparse | atomicwrites | attrs | bandit | cached-property | certifi | charset-normalizer | click | colorama | coverage | dparse | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | ghp-import | gitdb | gitpython | idna | importlib-metadata | iniconfig | jinja2 | markdown | markupsafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mkdocstrings-python-legacy | mypy-extensions | packaging | pathspec | pbr | platformdirs | pluggy | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | pygments | pymdown-extensions | pyparsing | pytest-forked | python-dateutil | pytkdocs | pyyaml | pyyaml-env-tag | requests | semver | setuptools | six | smmap | snowballstemmer | stevedore | termcolor | tomli | typed-ast | typing-extensions | urllib3 | watchdog | wheel | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build mkdocstrings-python . Thank you! python | pdm | copier-pdm","title":"Credits"},{"location":"credits/#direct-dependencies","text":"autoflake | black | darglint | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | git-changelog | griffe | isort | mkdocs | mkdocs-coverage | mkdocs-gen-files | mkdocs-literate-nav | mkdocs-material | mkdocs-section-index | mkdocstrings | mypy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | safety | toml | types-markdown | types-toml | wps-light","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | astor | astunparse | atomicwrites | attrs | bandit | cached-property | certifi | charset-normalizer | click | colorama | coverage | dparse | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | ghp-import | gitdb | gitpython | idna | importlib-metadata | iniconfig | jinja2 | markdown | markupsafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mkdocstrings-python-legacy | mypy-extensions | packaging | pathspec | pbr | platformdirs | pluggy | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | pygments | pymdown-extensions | pyparsing | pytest-forked | python-dateutil | pytkdocs | pyyaml | pyyaml-env-tag | requests | semver | setuptools | six | smmap | snowballstemmer | stevedore | termcolor | tomli | typed-ast | typing-extensions | urllib3 | watchdog | wheel | zipp More credits from the author","title":"Indirect dependencies"},{"location":"license/","text":"ISC License Copyright (c) 2021, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"usage/","text":"This is the documentation for the NEW, EXPERIMENTAL Python handler. To read the documentation for the LEGACY handler, go to the legacy handler documentation . Handler options \u00a4 Like every handler, the Python handler accepts the common selection and rendering options, both as global and local options. The selection options gives you control over the selection of Python objects, while the rendering options lets you change how the documentation is rendered. Selection \u00a4 The following options are directly passed to the handler's collector. See Collector: Griffe to learn more about Griffe. Option Description docstring_style Type: str . Docstring style to parse: google (default), numpy or sphinx . docstring_options Type: dict . Options to pass to the docstring parser. See Collector: Griffe . Configuration example Global Local # mkdocs.yml plugins : - mkdocstrings : handlers : python : selection : docstring_style : google :: : my_package selection : docstring_style : sphinx Rendering \u00a4 The default rendering options. Option Type Description Default show_root_heading bool Show the heading of the object at the root of the documentation tree. False show_root_toc_entry bool If the root heading is not shown, at least add a ToC entry for it. True show_root_full_path bool Show the full Python path for the root object heading. True show_object_full_path bool Show the full Python path of every object. False show_root_members_full_path bool Show the full Python path of objects that are children of the root object (for example, classes in a module). When False, show_object_full_path overrides. False show_category_heading bool When grouped by categories, show a heading for each category. False show_if_no_docstring bool Show the object heading even if it has no docstring or children with docstrings. False show_signature bool Show method and function signatures. True show_signature_annotations bool Show the type annotations in method and function signatures. False separate_signature bool Whether to put the whole signature in a code block below the heading. False line_length int Maximum line length when formatting code. 60 merge_init_into_class bool Whether to merge the __init__ method into the class' signature and docstring. False show_source bool Show the source code of this object. True show_bases bool Show the base classes of a class. True show_submodules bool When rendering a module, show its submodules recursively. True group_by_category bool Group the object's children by categories: attributes, classes, functions, methods, and modules. True heading_level int The initial heading level to use. 2 members_order str The members ordering to use. Options: alphabetical - order by the members names, source - order members as they appear in the source file. alphabetical docstring_section_style str The style used to render docstring sections. Options: table , list , spacy . table These options affect how the documentation is rendered. Configuration example Global Local # mkdocs.yml plugins : - mkdocstrings : handlers : python : rendering : show_root_heading : yes ## `ClassA` ::: my_package.my_module.ClassA rendering: show_root_heading: no heading_level: 3 Collector: Griffe \u00a4 The tool used by the Python handler to collect documentation from Python source code is Griffe . Griffe can mean \"signature\" in french. Supported docstrings styles \u00a4 Griffe supports the Google-style, Numpy-style and Sphinx-style docstring formats. The style used by default is the Google-style. You can configure what style you want to use with the docstring_style and docstring_options selection options , both globally or per autodoc instruction. Google: see Napoleon's documentation . Numpy: see Numpydoc's documentation . Sphinx: see Sphinx's documentation . See the supported docstring sections on Griffe's documentation . Google-style admonitions \u00a4 With Google-style docstrings, any section that is not recognized will be transformed into its admonition equivalent. For example: Docstring Result \"\"\" Important: It looks like a section, but it will be rendered as an admonition. Tip: You can even chose a title. This admonition has a custom title! \"\"\" Important It looks like a section, but it will be rendered as an admonition. You can even chose a title. This admonition has a custom title! Finding modules \u00a4 In order for Griffe to find your packages and modules, you can take advantage of the usual Python loading mechanisms: install your package in the current virtualenv: . venv/bin/activate pip install -e . poetry install ...etc. or add your package(s) parent directory in the PYTHONPATH . ( The following instructions assume your Python package is in the src directory. ) In Bash and other shells, you can run your command like this (note the prepended PYTHONPATH=... ): $ PYTHONPATH = src mkdocs serve You can also export that variable, but this is not recommended as it could affect other Python processes: export PYTHONPATH = src # Linux/Bash and similar setx PYTHONPATH src # Windows, USE AT YOUR OWN RISKS Recommended style (Material) \u00a4 Here are some CSS rules for the Material for MkDocs theme: /* Indentation. */ div . doc-contents : not ( . first ) { padding-left : 25 px ; border-left : .05 rem solid var ( --md-default-fg-color--lightest ); margin-bottom : 80 px ; } Recommended style (ReadTheDocs) \u00a4 Here are some CSS rules for the built-in ReadTheDocs theme: /* Indentation. */ div . doc-contents : not ( . first ) { padding-left : 25 px ; border-left : .05 rem solid rgba ( 200 , 200 , 200 , 0.2 ); margin-bottom : 60 px ; }","title":"Usage"},{"location":"usage/#handler-options","text":"Like every handler, the Python handler accepts the common selection and rendering options, both as global and local options. The selection options gives you control over the selection of Python objects, while the rendering options lets you change how the documentation is rendered.","title":"Handler options"},{"location":"usage/#selection","text":"The following options are directly passed to the handler's collector. See Collector: Griffe to learn more about Griffe. Option Description docstring_style Type: str . Docstring style to parse: google (default), numpy or sphinx . docstring_options Type: dict . Options to pass to the docstring parser. See Collector: Griffe . Configuration example Global Local # mkdocs.yml plugins : - mkdocstrings : handlers : python : selection : docstring_style : google :: : my_package selection : docstring_style : sphinx","title":"Selection"},{"location":"usage/#rendering","text":"The default rendering options. Option Type Description Default show_root_heading bool Show the heading of the object at the root of the documentation tree. False show_root_toc_entry bool If the root heading is not shown, at least add a ToC entry for it. True show_root_full_path bool Show the full Python path for the root object heading. True show_object_full_path bool Show the full Python path of every object. False show_root_members_full_path bool Show the full Python path of objects that are children of the root object (for example, classes in a module). When False, show_object_full_path overrides. False show_category_heading bool When grouped by categories, show a heading for each category. False show_if_no_docstring bool Show the object heading even if it has no docstring or children with docstrings. False show_signature bool Show method and function signatures. True show_signature_annotations bool Show the type annotations in method and function signatures. False separate_signature bool Whether to put the whole signature in a code block below the heading. False line_length int Maximum line length when formatting code. 60 merge_init_into_class bool Whether to merge the __init__ method into the class' signature and docstring. False show_source bool Show the source code of this object. True show_bases bool Show the base classes of a class. True show_submodules bool When rendering a module, show its submodules recursively. True group_by_category bool Group the object's children by categories: attributes, classes, functions, methods, and modules. True heading_level int The initial heading level to use. 2 members_order str The members ordering to use. Options: alphabetical - order by the members names, source - order members as they appear in the source file. alphabetical docstring_section_style str The style used to render docstring sections. Options: table , list , spacy . table These options affect how the documentation is rendered. Configuration example Global Local # mkdocs.yml plugins : - mkdocstrings : handlers : python : rendering : show_root_heading : yes ## `ClassA` ::: my_package.my_module.ClassA rendering: show_root_heading: no heading_level: 3","title":"Rendering"},{"location":"usage/#collector-griffe","text":"The tool used by the Python handler to collect documentation from Python source code is Griffe . Griffe can mean \"signature\" in french.","title":"Collector: Griffe"},{"location":"usage/#supported-docstrings-styles","text":"Griffe supports the Google-style, Numpy-style and Sphinx-style docstring formats. The style used by default is the Google-style. You can configure what style you want to use with the docstring_style and docstring_options selection options , both globally or per autodoc instruction. Google: see Napoleon's documentation . Numpy: see Numpydoc's documentation . Sphinx: see Sphinx's documentation . See the supported docstring sections on Griffe's documentation .","title":"Supported docstrings styles"},{"location":"usage/#google-style-admonitions","text":"With Google-style docstrings, any section that is not recognized will be transformed into its admonition equivalent. For example: Docstring Result \"\"\" Important: It looks like a section, but it will be rendered as an admonition. Tip: You can even chose a title. This admonition has a custom title! \"\"\" Important It looks like a section, but it will be rendered as an admonition. You can even chose a title. This admonition has a custom title!","title":"Google-style admonitions"},{"location":"usage/#finding-modules","text":"In order for Griffe to find your packages and modules, you can take advantage of the usual Python loading mechanisms: install your package in the current virtualenv: . venv/bin/activate pip install -e . poetry install ...etc. or add your package(s) parent directory in the PYTHONPATH . ( The following instructions assume your Python package is in the src directory. ) In Bash and other shells, you can run your command like this (note the prepended PYTHONPATH=... ): $ PYTHONPATH = src mkdocs serve You can also export that variable, but this is not recommended as it could affect other Python processes: export PYTHONPATH = src # Linux/Bash and similar setx PYTHONPATH src # Windows, USE AT YOUR OWN RISKS","title":"Finding modules"},{"location":"usage/#recommended-style-material","text":"Here are some CSS rules for the Material for MkDocs theme: /* Indentation. */ div . doc-contents : not ( . first ) { padding-left : 25 px ; border-left : .05 rem solid var ( --md-default-fg-color--lightest ); margin-bottom : 80 px ; }","title":"Recommended style (Material)"},{"location":"usage/#recommended-style-readthedocs","text":"Here are some CSS rules for the built-in ReadTheDocs theme: /* Indentation. */ div . doc-contents : not ( . first ) { padding-left : 25 px ; border-left : .05 rem solid rgba ( 200 , 200 , 200 , 0.2 ); margin-bottom : 60 px ; }","title":"Recommended style (ReadTheDocs)"},{"location":"reference/SUMMARY/","text":"mkdocstrings_handlers python collector handler renderer","title":"SUMMARY"},{"location":"reference/mkdocstrings_handlers/python/","text":"This package implements a handler for the Python language. get_handler ( theme , custom_templates = None , ** config ) \u00a4 Simply return an instance of PythonHandler . Parameters: Name Type Description Default theme str The theme to use when rendering contents. required custom_templates Optional [ str ] Directory containing custom templates. None **config Any Configuration passed to the handler. {} Returns: Type Description PythonHandler An instance of PythonHandler . Source code in mkdocstrings_handlers/python/handler.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def get_handler ( theme : str , # noqa: W0613 (unused argument config) custom_templates : Optional [ str ] = None , ** config : Any , ) -> PythonHandler : \"\"\"Simply return an instance of `PythonHandler`. Arguments: theme: The theme to use when rendering contents. custom_templates: Directory containing custom templates. **config: Configuration passed to the handler. Returns: An instance of `PythonHandler`. \"\"\" return PythonHandler ( collector = PythonCollector (), renderer = PythonRenderer ( \"python\" , theme , custom_templates ), )","title":"python"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.get_handler","text":"Simply return an instance of PythonHandler . Parameters: Name Type Description Default theme str The theme to use when rendering contents. required custom_templates Optional [ str ] Directory containing custom templates. None **config Any Configuration passed to the handler. {} Returns: Type Description PythonHandler An instance of PythonHandler . Source code in mkdocstrings_handlers/python/handler.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def get_handler ( theme : str , # noqa: W0613 (unused argument config) custom_templates : Optional [ str ] = None , ** config : Any , ) -> PythonHandler : \"\"\"Simply return an instance of `PythonHandler`. Arguments: theme: The theme to use when rendering contents. custom_templates: Directory containing custom templates. **config: Configuration passed to the handler. Returns: An instance of `PythonHandler`. \"\"\" return PythonHandler ( collector = PythonCollector (), renderer = PythonRenderer ( \"python\" , theme , custom_templates ), )","title":"get_handler()"},{"location":"reference/mkdocstrings_handlers/python/collector/","text":"This module implements a collector for the Python language. It collects data with Griffe . PythonCollector () \u00a4 Bases: BaseCollector The class responsible for loading Jinja templates and rendering them. It defines some configuration options, implements the render method, and overrides the update_env method of the BaseRenderer class . Source code in mkdocstrings_handlers/python/collector.py 20 21 22 23 def __init__ ( self ) -> None : \"\"\"Initialize the collector.\"\"\" self . _modules_collection : ModulesCollection = ModulesCollection () self . _lines_collection : LinesCollection = LinesCollection () default_config : dict = { 'docstring_style' : 'google' , 'docstring_options' : {}} class-attribute \u00a4 The default selection options. Option Type Description Default docstring_style \"google\" | \"numpy\" | \"sphinx\" | None The docstring style to use. \"google\" docstring_options dict[str, Any] The options for the docstring parser. {} collect ( self , identifier , config ) \u00a4 Collect the documentation tree given an identifier and selection options. Parameters: Name Type Description Default identifier str The dotted-path of a Python object available in the Python path. required config dict Selection options, used to alter the data collection done by pytkdocs . required Raises: Type Description CollectionError When there was a problem collecting the object documentation. Returns: Type Description CollectorItem The collected object-tree. Source code in mkdocstrings_handlers/python/collector.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def collect ( self , identifier : str , config : dict ) -> CollectorItem : # noqa: WPS231 \"\"\"Collect the documentation tree given an identifier and selection options. Arguments: identifier: The dotted-path of a Python object available in the Python path. config: Selection options, used to alter the data collection done by `pytkdocs`. Raises: CollectionError: When there was a problem collecting the object documentation. Returns: The collected object-tree. \"\"\" module_name = identifier . split ( \".\" , 1 )[ 0 ] unknown_module = module_name not in self . _modules_collection if config . pop ( \"fallback\" , False ) and unknown_module : raise CollectionError ( \"Not loading additional modules during fallback\" ) final_config = ChainMap ( config , self . default_config ) parser_name = final_config [ \"docstring_style\" ] parser_options = final_config [ \"docstring_options\" ] parser = parser_name and Parser ( parser_name ) if unknown_module : loader = GriffeLoader ( extensions = load_extensions ( final_config . get ( \"extensions\" , [])), docstring_parser = parser , docstring_options = parser_options , modules_collection = self . _modules_collection , lines_collection = self . _lines_collection , ) try : loader . load_module ( module_name ) except ImportError as error : raise CollectionError ( str ( error )) from error unresolved , iterations = loader . resolve_aliases ( only_exported = True , only_known_modules = True ) if unresolved : logger . warning ( f \" { len ( unresolved ) } aliases were still unresolved after { iterations } iterations\" ) try : doc_object = self . _modules_collection [ identifier ] except KeyError as error : # noqa: WPS440 raise CollectionError ( f \" { identifier } could not be found\" ) from error if not unknown_module and doc_object . docstring is not None : doc_object . docstring . parser = parser doc_object . docstring . parser_options = parser_options return doc_object","title":"collector"},{"location":"reference/mkdocstrings_handlers/python/collector/#mkdocstrings_handlers.python.collector.PythonCollector","text":"Bases: BaseCollector The class responsible for loading Jinja templates and rendering them. It defines some configuration options, implements the render method, and overrides the update_env method of the BaseRenderer class . Source code in mkdocstrings_handlers/python/collector.py 20 21 22 23 def __init__ ( self ) -> None : \"\"\"Initialize the collector.\"\"\" self . _modules_collection : ModulesCollection = ModulesCollection () self . _lines_collection : LinesCollection = LinesCollection ()","title":"PythonCollector"},{"location":"reference/mkdocstrings_handlers/python/collector/#mkdocstrings_handlers.python.collector.PythonCollector.default_config","text":"The default selection options. Option Type Description Default docstring_style \"google\" | \"numpy\" | \"sphinx\" | None The docstring style to use. \"google\" docstring_options dict[str, Any] The options for the docstring parser. {}","title":"default_config"},{"location":"reference/mkdocstrings_handlers/python/collector/#mkdocstrings_handlers.python.collector.PythonCollector.collect","text":"Collect the documentation tree given an identifier and selection options. Parameters: Name Type Description Default identifier str The dotted-path of a Python object available in the Python path. required config dict Selection options, used to alter the data collection done by pytkdocs . required Raises: Type Description CollectionError When there was a problem collecting the object documentation. Returns: Type Description CollectorItem The collected object-tree. Source code in mkdocstrings_handlers/python/collector.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def collect ( self , identifier : str , config : dict ) -> CollectorItem : # noqa: WPS231 \"\"\"Collect the documentation tree given an identifier and selection options. Arguments: identifier: The dotted-path of a Python object available in the Python path. config: Selection options, used to alter the data collection done by `pytkdocs`. Raises: CollectionError: When there was a problem collecting the object documentation. Returns: The collected object-tree. \"\"\" module_name = identifier . split ( \".\" , 1 )[ 0 ] unknown_module = module_name not in self . _modules_collection if config . pop ( \"fallback\" , False ) and unknown_module : raise CollectionError ( \"Not loading additional modules during fallback\" ) final_config = ChainMap ( config , self . default_config ) parser_name = final_config [ \"docstring_style\" ] parser_options = final_config [ \"docstring_options\" ] parser = parser_name and Parser ( parser_name ) if unknown_module : loader = GriffeLoader ( extensions = load_extensions ( final_config . get ( \"extensions\" , [])), docstring_parser = parser , docstring_options = parser_options , modules_collection = self . _modules_collection , lines_collection = self . _lines_collection , ) try : loader . load_module ( module_name ) except ImportError as error : raise CollectionError ( str ( error )) from error unresolved , iterations = loader . resolve_aliases ( only_exported = True , only_known_modules = True ) if unresolved : logger . warning ( f \" { len ( unresolved ) } aliases were still unresolved after { iterations } iterations\" ) try : doc_object = self . _modules_collection [ identifier ] except KeyError as error : # noqa: WPS440 raise CollectionError ( f \" { identifier } could not be found\" ) from error if not unknown_module and doc_object . docstring is not None : doc_object . docstring . parser = parser doc_object . docstring . parser_options = parser_options return doc_object","title":"collect()"},{"location":"reference/mkdocstrings_handlers/python/handler/","text":"This module implements a handler for the Python language. PythonHandler \u00a4 Bases: BaseHandler The Python handler class. Attributes: Name Type Description domain str The cross-documentation domain/language for this handler. enable_inventory bool Whether this handler is interested in enabling the creation of the objects.inv Sphinx inventory file. load_inventory ( cls , in_file , url , base_url = None , ** kwargs ) \u00a4 Yield items and their URLs from an inventory file streamed from in_file . This implements mkdocstrings' load_inventory \"protocol\" (see plugin.py). Parameters: Name Type Description Default in_file BinaryIO The binary file-like object to read the inventory from. required url str The URL that this file is being streamed from (used to guess base_url ). required base_url Optional [ str ] The URL that this inventory's sub-paths are relative to. None **kwargs Any Ignore additional arguments passed from the config. {} Yields: Type Description Iterator [ Tuple [ str , str ]] Tuples of (item identifier, item URL). Source code in mkdocstrings_handlers/python/handler.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @classmethod def load_inventory ( cls , in_file : BinaryIO , url : str , base_url : Optional [ str ] = None , ** kwargs : Any , ) -> Iterator [ Tuple [ str , str ]]: \"\"\"Yield items and their URLs from an inventory file streamed from `in_file`. This implements mkdocstrings' `load_inventory` \"protocol\" (see plugin.py). Arguments: in_file: The binary file-like object to read the inventory from. url: The URL that this file is being streamed from (used to guess `base_url`). base_url: The URL that this inventory's sub-paths are relative to. **kwargs: Ignore additional arguments passed from the config. Yields: Tuples of (item identifier, item URL). \"\"\" if base_url is None : base_url = posixpath . dirname ( url ) for item in Inventory . parse_sphinx ( in_file , domain_filter = ( \"py\" ,)) . values (): # noqa: WPS526 yield item . name , posixpath . join ( base_url , item . uri ) get_handler ( theme , custom_templates = None , ** config ) \u00a4 Simply return an instance of PythonHandler . Parameters: Name Type Description Default theme str The theme to use when rendering contents. required custom_templates Optional [ str ] Directory containing custom templates. None **config Any Configuration passed to the handler. {} Returns: Type Description PythonHandler An instance of PythonHandler . Source code in mkdocstrings_handlers/python/handler.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get_handler ( theme : str , # noqa: W0613 (unused argument config) custom_templates : Optional [ str ] = None , ** config : Any , ) -> PythonHandler : \"\"\"Simply return an instance of `PythonHandler`. Arguments: theme: The theme to use when rendering contents. custom_templates: Directory containing custom templates. **config: Configuration passed to the handler. Returns: An instance of `PythonHandler`. \"\"\" return PythonHandler ( collector = PythonCollector (), renderer = PythonRenderer ( \"python\" , theme , custom_templates ), )","title":"handler"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.PythonHandler","text":"Bases: BaseHandler The Python handler class. Attributes: Name Type Description domain str The cross-documentation domain/language for this handler. enable_inventory bool Whether this handler is interested in enabling the creation of the objects.inv Sphinx inventory file.","title":"PythonHandler"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.PythonHandler.load_inventory","text":"Yield items and their URLs from an inventory file streamed from in_file . This implements mkdocstrings' load_inventory \"protocol\" (see plugin.py). Parameters: Name Type Description Default in_file BinaryIO The binary file-like object to read the inventory from. required url str The URL that this file is being streamed from (used to guess base_url ). required base_url Optional [ str ] The URL that this inventory's sub-paths are relative to. None **kwargs Any Ignore additional arguments passed from the config. {} Yields: Type Description Iterator [ Tuple [ str , str ]] Tuples of (item identifier, item URL). Source code in mkdocstrings_handlers/python/handler.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @classmethod def load_inventory ( cls , in_file : BinaryIO , url : str , base_url : Optional [ str ] = None , ** kwargs : Any , ) -> Iterator [ Tuple [ str , str ]]: \"\"\"Yield items and their URLs from an inventory file streamed from `in_file`. This implements mkdocstrings' `load_inventory` \"protocol\" (see plugin.py). Arguments: in_file: The binary file-like object to read the inventory from. url: The URL that this file is being streamed from (used to guess `base_url`). base_url: The URL that this inventory's sub-paths are relative to. **kwargs: Ignore additional arguments passed from the config. Yields: Tuples of (item identifier, item URL). \"\"\" if base_url is None : base_url = posixpath . dirname ( url ) for item in Inventory . parse_sphinx ( in_file , domain_filter = ( \"py\" ,)) . values (): # noqa: WPS526 yield item . name , posixpath . join ( base_url , item . uri )","title":"load_inventory()"},{"location":"reference/mkdocstrings_handlers/python/handler/#mkdocstrings_handlers.python.handler.get_handler","text":"Simply return an instance of PythonHandler . Parameters: Name Type Description Default theme str The theme to use when rendering contents. required custom_templates Optional [ str ] Directory containing custom templates. None **config Any Configuration passed to the handler. {} Returns: Type Description PythonHandler An instance of PythonHandler . Source code in mkdocstrings_handlers/python/handler.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get_handler ( theme : str , # noqa: W0613 (unused argument config) custom_templates : Optional [ str ] = None , ** config : Any , ) -> PythonHandler : \"\"\"Simply return an instance of `PythonHandler`. Arguments: theme: The theme to use when rendering contents. custom_templates: Directory containing custom templates. **config: Configuration passed to the handler. Returns: An instance of `PythonHandler`. \"\"\" return PythonHandler ( collector = PythonCollector (), renderer = PythonRenderer ( \"python\" , theme , custom_templates ), )","title":"get_handler()"},{"location":"reference/mkdocstrings_handlers/python/renderer/","text":"This module implements a renderer for the Python language. Order \u00a4 Bases: enum . Enum Enumeration for the possible members ordering. PythonRenderer \u00a4 Bases: BaseRenderer The class responsible for loading Jinja templates and rendering them. It defines some configuration options, implements the render method, and overrides the update_env method of the BaseRenderer class . Attributes: Name Type Description fallback_theme The theme to fallback to. default_config dict The default rendering options, see default_config . default_config : dict = { 'show_root_heading' : False , 'show_root_toc_entry' : True , 'show_root_full_path' : True , 'show_root_members_full_path' : False , 'show_object_full_path' : False , 'show_category_heading' : False , 'show_if_no_docstring' : False , 'show_signature' : True , 'show_signature_annotations' : False , 'separate_signature' : False , 'line_length' : 60 , 'merge_init_into_class' : False , 'show_source' : True , 'show_bases' : True , 'show_submodules' : True , 'group_by_category' : True , 'heading_level' : 2 , 'members_order' : Order . alphabetical . value , 'docstring_section_style' : 'table' } class-attribute \u00a4 The default rendering options. Option Type Description Default show_root_heading bool Show the heading of the object at the root of the documentation tree. False show_root_toc_entry bool If the root heading is not shown, at least add a ToC entry for it. True show_root_full_path bool Show the full Python path for the root object heading. True show_object_full_path bool Show the full Python path of every object. False show_root_members_full_path bool Show the full Python path of objects that are children of the root object (for example, classes in a module). When False, show_object_full_path overrides. False show_category_heading bool When grouped by categories, show a heading for each category. False show_if_no_docstring bool Show the object heading even if it has no docstring or children with docstrings. False show_signature bool Show method and function signatures. True show_signature_annotations bool Show the type annotations in method and function signatures. False separate_signature bool Whether to put the whole signature in a code block below the heading. False line_length int Maximum line length when formatting code. 60 merge_init_into_class bool Whether to merge the __init__ method into the class' signature and docstring. False show_source bool Show the source code of this object. True show_bases bool Show the base classes of a class. True show_submodules bool When rendering a module, show its submodules recursively. True group_by_category bool Group the object's children by categories: attributes, classes, functions, methods, and modules. True heading_level int The initial heading level to use. 2 members_order str The members ordering to use. Options: alphabetical - order by the members names, source - order members as they appear in the source file. alphabetical docstring_section_style str The style used to render docstring sections. Options: table , list , spacy . table do_crossref ( self , path , brief = True ) \u00a4 Filter to create cross-references. Parameters: Name Type Description Default path str The path to link to. required brief bool Show only the last part of the path, add full path as hover. True Returns: Type Description Markup Markup text. Source code in mkdocstrings_handlers/python/renderer.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 def do_crossref ( self , path : str , brief : bool = True ) -> Markup : \"\"\"Filter to create cross-references. Parameters: path: The path to link to. brief: Show only the last part of the path, add full path as hover. Returns: Markup text. \"\"\" full_path = path if brief : path = full_path . split ( \".\" )[ - 1 ] return Markup ( \"<span data-autorefs-optional-hover= {full_path} > {path} </span>\" ) . format ( full_path = full_path , path = path ) do_format_code ( self , code , line_length ) \u00a4 Format code using Black. Parameters: Name Type Description Default code str The code to format. required line_length int The line length to give to Black. required Returns: Type Description str The same code, formatted. Source code in mkdocstrings_handlers/python/renderer.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def do_format_code ( self , code : str , line_length : int ) -> str : \"\"\"Format code using Black. Parameters: code: The code to format. line_length: The line length to give to Black. Returns: The same code, formatted. \"\"\" code = code . strip () if len ( code ) < line_length : return code formatter = _get_black_formatter () return formatter ( code , line_length ) do_format_signature ( self , signature , line_length ) \u00a4 Format a signature using Black. Parameters: Name Type Description Default signature str The signature to format. required line_length int The line length to give to Black. required Returns: Type Description str The same code, formatted. Source code in mkdocstrings_handlers/python/renderer.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def do_format_signature ( self , signature : str , line_length : int ) -> str : \"\"\"Format a signature using Black. Parameters: signature: The signature to format. line_length: The line length to give to Black. Returns: The same code, formatted. \"\"\" code = signature . strip () if len ( code ) < line_length : return code formatter = _get_black_formatter () formatted = formatter ( f \"def { code } : pass\" , line_length ) # remove starting `def ` and trailing `: pass` return formatted [ 4 : - 5 ] . strip ()[: - 1 ] do_multi_crossref ( self , text , code = True ) \u00a4 Filter to create cross-references. Parameters: Name Type Description Default text str The text to scan. required code bool Whether to wrap the result in a code tag. True Returns: Type Description Markup Markup text. Source code in mkdocstrings_handlers/python/renderer.py 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 def do_multi_crossref ( self , text : str , code : bool = True ) -> Markup : \"\"\"Filter to create cross-references. Parameters: text: The text to scan. code: Whether to wrap the result in a code tag. Returns: Markup text. \"\"\" group_number = 0 variables = {} def repl ( match ): # noqa: WPS430 nonlocal group_number # noqa: WPS420 group_number += 1 path = match . group () path_var = f \"path { group_number } \" variables [ path_var ] = path return f \"<span data-autorefs-optional-hover= {{ { path_var } }} > {{ { path_var } }} </span>\" text = re . sub ( r \"([\\w.]+)\" , repl , text ) if code : text = f \"<code> { text } </code>\" return Markup ( text ) . format ( ** variables ) do_order_members ( self , members , order ) \u00a4 Order members given an ordering method. Parameters: Name Type Description Default members Sequence [ Object | Alias ] The members to order. required order Order The ordering method. required Returns: Type Description Sequence [ Object | Alias ] The same members, ordered. Source code in mkdocstrings_handlers/python/renderer.py 177 178 179 180 181 182 183 184 185 186 187 def do_order_members ( self , members : Sequence [ Object | Alias ], order : Order ) -> Sequence [ Object | Alias ]: \"\"\"Order members given an ordering method. Parameters: members: The members to order. order: The ordering method. Returns: The same members, ordered. \"\"\" return sorted ( members , key = order_map [ order ])","title":"renderer"},{"location":"reference/mkdocstrings_handlers/python/renderer/#mkdocstrings_handlers.python.renderer.Order","text":"Bases: enum . Enum Enumeration for the possible members ordering.","title":"Order"},{"location":"reference/mkdocstrings_handlers/python/renderer/#mkdocstrings_handlers.python.renderer.PythonRenderer","text":"Bases: BaseRenderer The class responsible for loading Jinja templates and rendering them. It defines some configuration options, implements the render method, and overrides the update_env method of the BaseRenderer class . Attributes: Name Type Description fallback_theme The theme to fallback to. default_config dict The default rendering options, see default_config .","title":"PythonRenderer"},{"location":"reference/mkdocstrings_handlers/python/renderer/#mkdocstrings_handlers.python.renderer.PythonRenderer.default_config","text":"The default rendering options. Option Type Description Default show_root_heading bool Show the heading of the object at the root of the documentation tree. False show_root_toc_entry bool If the root heading is not shown, at least add a ToC entry for it. True show_root_full_path bool Show the full Python path for the root object heading. True show_object_full_path bool Show the full Python path of every object. False show_root_members_full_path bool Show the full Python path of objects that are children of the root object (for example, classes in a module). When False, show_object_full_path overrides. False show_category_heading bool When grouped by categories, show a heading for each category. False show_if_no_docstring bool Show the object heading even if it has no docstring or children with docstrings. False show_signature bool Show method and function signatures. True show_signature_annotations bool Show the type annotations in method and function signatures. False separate_signature bool Whether to put the whole signature in a code block below the heading. False line_length int Maximum line length when formatting code. 60 merge_init_into_class bool Whether to merge the __init__ method into the class' signature and docstring. False show_source bool Show the source code of this object. True show_bases bool Show the base classes of a class. True show_submodules bool When rendering a module, show its submodules recursively. True group_by_category bool Group the object's children by categories: attributes, classes, functions, methods, and modules. True heading_level int The initial heading level to use. 2 members_order str The members ordering to use. Options: alphabetical - order by the members names, source - order members as they appear in the source file. alphabetical docstring_section_style str The style used to render docstring sections. Options: table , list , spacy . table","title":"default_config"},{"location":"reference/mkdocstrings_handlers/python/renderer/#mkdocstrings_handlers.python.renderer.PythonRenderer.do_crossref","text":"Filter to create cross-references. Parameters: Name Type Description Default path str The path to link to. required brief bool Show only the last part of the path, add full path as hover. True Returns: Type Description Markup Markup text. Source code in mkdocstrings_handlers/python/renderer.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 def do_crossref ( self , path : str , brief : bool = True ) -> Markup : \"\"\"Filter to create cross-references. Parameters: path: The path to link to. brief: Show only the last part of the path, add full path as hover. Returns: Markup text. \"\"\" full_path = path if brief : path = full_path . split ( \".\" )[ - 1 ] return Markup ( \"<span data-autorefs-optional-hover= {full_path} > {path} </span>\" ) . format ( full_path = full_path , path = path )","title":"do_crossref()"},{"location":"reference/mkdocstrings_handlers/python/renderer/#mkdocstrings_handlers.python.renderer.PythonRenderer.do_format_code","text":"Format code using Black. Parameters: Name Type Description Default code str The code to format. required line_length int The line length to give to Black. required Returns: Type Description str The same code, formatted. Source code in mkdocstrings_handlers/python/renderer.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def do_format_code ( self , code : str , line_length : int ) -> str : \"\"\"Format code using Black. Parameters: code: The code to format. line_length: The line length to give to Black. Returns: The same code, formatted. \"\"\" code = code . strip () if len ( code ) < line_length : return code formatter = _get_black_formatter () return formatter ( code , line_length )","title":"do_format_code()"},{"location":"reference/mkdocstrings_handlers/python/renderer/#mkdocstrings_handlers.python.renderer.PythonRenderer.do_format_signature","text":"Format a signature using Black. Parameters: Name Type Description Default signature str The signature to format. required line_length int The line length to give to Black. required Returns: Type Description str The same code, formatted. Source code in mkdocstrings_handlers/python/renderer.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def do_format_signature ( self , signature : str , line_length : int ) -> str : \"\"\"Format a signature using Black. Parameters: signature: The signature to format. line_length: The line length to give to Black. Returns: The same code, formatted. \"\"\" code = signature . strip () if len ( code ) < line_length : return code formatter = _get_black_formatter () formatted = formatter ( f \"def { code } : pass\" , line_length ) # remove starting `def ` and trailing `: pass` return formatted [ 4 : - 5 ] . strip ()[: - 1 ]","title":"do_format_signature()"},{"location":"reference/mkdocstrings_handlers/python/renderer/#mkdocstrings_handlers.python.renderer.PythonRenderer.do_multi_crossref","text":"Filter to create cross-references. Parameters: Name Type Description Default text str The text to scan. required code bool Whether to wrap the result in a code tag. True Returns: Type Description Markup Markup text. Source code in mkdocstrings_handlers/python/renderer.py 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 def do_multi_crossref ( self , text : str , code : bool = True ) -> Markup : \"\"\"Filter to create cross-references. Parameters: text: The text to scan. code: Whether to wrap the result in a code tag. Returns: Markup text. \"\"\" group_number = 0 variables = {} def repl ( match ): # noqa: WPS430 nonlocal group_number # noqa: WPS420 group_number += 1 path = match . group () path_var = f \"path { group_number } \" variables [ path_var ] = path return f \"<span data-autorefs-optional-hover= {{ { path_var } }} > {{ { path_var } }} </span>\" text = re . sub ( r \"([\\w.]+)\" , repl , text ) if code : text = f \"<code> { text } </code>\" return Markup ( text ) . format ( ** variables )","title":"do_multi_crossref()"},{"location":"reference/mkdocstrings_handlers/python/renderer/#mkdocstrings_handlers.python.renderer.PythonRenderer.do_order_members","text":"Order members given an ordering method. Parameters: Name Type Description Default members Sequence [ Object | Alias ] The members to order. required order Order The ordering method. required Returns: Type Description Sequence [ Object | Alias ] The same members, ordered. Source code in mkdocstrings_handlers/python/renderer.py 177 178 179 180 181 182 183 184 185 186 187 def do_order_members ( self , members : Sequence [ Object | Alias ], order : Order ) -> Sequence [ Object | Alias ]: \"\"\"Order members given an ordering method. Parameters: members: The members to order. order: The ordering method. Returns: The same members, ordered. \"\"\" return sorted ( members , key = order_map [ order ])","title":"do_order_members()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}